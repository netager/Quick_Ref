1. 자바 기본 익히기
## 자바 프로그래밍 시작하기
## 변수화 자료형(1)
## 변수와 자료형(2)
## 변수와 자료형(3)

## 자바의 여러가지 연산자(1)
# 대입 연산자
  - 변수에 값을 대입하는 연산자
  - 연산의 결과를 변수에 대입 
  - 우선 순위가 가장 낮은 연산자 
  - 왼쪽 변수(lvalue)에 오른쪽 변수(값)(rvalue)를 대입 

# 부호 연산자
  - 단항 연산자
  - 양수/음수의 표현, 값의 부호를 변경 
  - 변수에 +, -를 사용한다고 해서 변수의 값이 변하는 것은 아님
  - 변수의 값을 변경하려면 대입연산자를 사용함.

# 산술 연산자 
  - +, -, *, /, %
  - %는 나머지를 구하는 연산자 
    - 숫자 n의 나머지는 0 ~ n-1 범위의 수 
    - 특정 범위 안의 수를 구할 때 종종 사용

# 증가 감소 연산자 
  - 단항 연산자
  - val = ++num;  // 먼저 num 값에 1 증가후 val 변수에 대입, ;이전에 증가
  - val = num++;  // val 변수에 기존 num값을 대입한후 num 값 1 증가, ;이후에 증가 

# 관계 연산자 
  - 이항 연산자 
  - >, <, >=, <-, ==, != 
  - 결과값은 True or False 

# 논리 연산자
  - 관계 연산자와 혼합하여 많이 사용 됨
  - 연산의 결과가 true(참), false(거짓)으로 반환 됨
  - &&(논리곱), ||(논리합), !(부정)   
  
# 단락 회로 평가(short circuit evaluation)
  - 논리 곱(&&)은 두 항이 모두 true일 때만 결과가 true
    => 앞의 항이 false이면 뒤 항의 결과를 평가하지 않아도 false임 
  - 논리 합(||)은 두 항이 모두 false 일 때만 결과가 false 
    => d앞의 항이 true이면 뒤 항의 결과를 평가하지 않아도 true 임 
	
# 복합 대입 연산자 
  - 대입 연사자와 다른 연산자를 함께 사용함.
  - 프로그램에서 자주 사용하는 연산자 
  - +=, -=, *=, /=, %=  
  
# 조건 연산자 
  - 삼항 연산자 
  - 조건 식의 결과가 true인 경우와 false인 경우에 따라 다른 식이나 결과가 수행됨. 
  - 제어문 중 조건문을 간단히 표현할 때 사용할 수 있음.
  - 조건식 ? 결과1 : 결과2;   
    - int num = (5 > 3) ? 10 : 20;

# 비트 연산자 
  - ~ : 비트의 반전(1의 보수)
  - & : 비트 단위 AND, 1 & 1 이면 1 반환 그외는 0 
  - | : 비트 단위 OR,  0 | 0 이면 0 반환 그외는 1
  - ^ : 비트 단튀 XOR, 두개의 비트가 서로 다른 경우에 1 반환 
  - << : 왼쪽 shift, a << 2 변수 a를 2비트 만큼 왼쪽으로 이동 
  - >> : 오른쪽 shift, a >> 2 변수 a를 2비트만큼 오른쪽 이동
  - >>> : 오른쪽 shift,  >> 동일한 연산자. 채워지는 비트가 부호와 상관없이 0임.
  
  - 비트 연산자는 정수에만 사용할 수 있다.

# 비트 연산자의 활용 
  - 마스크 : 특정 비트들은 가리고 몇 개의 비트들의 값만 사용할 때
  - 비트켜기 : 특정 비트들만을 1로 설정해서 사용하고 싶을 때 
    - 예) & 00001111(하위 4비트 중 1인 비트만 꺼내기)
  - 비트끄기 : 특정 비트들만을 0으로 설정해서 사용하고 싶을 때 
    - 예) | 11110000 (하위 4비트 중 0인 비트만 0으로 만들기)
  - 비트토글 : 모든 비트들을 0은 1로, 1은 0으로 바꾸고 싶을 때 

  
4. 제어의 흐름 이해하기
## 조건문
  - 주어진 조건에 따라 다른 수행문이 실행되도록 프로그래밍 하는 것.
  - if 문 
    - if(조건식) {
		수행문;
	  }
  - if - else 문
    - if(조건식) {
		수행문1;
      }		
	  else {
		수행문2;
	  }
  - if-else if-else 문 
    - if(조건 1) {
		문장1;
      }	else if(조건 2) {
			문장2;	  
	  }	else {
		문장3;
	  }

## 조건문과 조건 연산자
  - 간단한 if-esle조건문은 조건 연산자로 구현할 수 있음.
  - if(a>b) max = a; else max = b;
  - max = (a>b) > a: b; 

# switch-case문
  - 조건식의 결과가 정수 또는 문자열의 값이고 그 값에 따라 수행문이 결정될 때 
    if-else if-else문을 대신하여 switch-case문을 사용할 수 있음.
    - switch(rank) {
			case 1 : medalColor = 'G';
				break;
			case 2 : medalColor = 'S'; 
				break;  
  			case 3 : medalColor = 'B';
				break;
			default : medalColor = 'A';
      }

## case문에 문자열 사용하기 
  - 자바7 부터 switch-case 문의 case 값에 문자열 사용 가능 
  

## 반복문
  - 주어진 조건이 만족 할 때까지 수행문을 반복적으로 수행함
  - while, do-while, for문이 있음
  - 조건의 만족과 반복 가능 여부에 대해 정확한 코딩을 해야 함.

## while문
  - 조건식이 참인 동안 수행문을 반복해서 수행 
  - while(조건식) {
		수행문1;
	}	
		수행문 2;

## for 문 
  - 반복문 중 가장 많이 사용하는 반복문
  - 주로 조건이 횟수인 경우에 사용 
  - 초기화식, 조건식, 증감식을 한꺼번에 작성 
    - for(초기화식; 조건식; 증감식) {
			수행문;
	  }

## for 문 수행 과정 
  - ① 초기화 수행 ② 조건식 검증 ③ 수행문 실행 ④증감식 수행 -> 반복 -> ② 조건식 검증 ③ 수행문 실행 ④증감식 수행  	  

## 각 반복문의 쓰임
  - while 문 
    - 하나의 조건에 대해 반복수행이 이루어질 때 사용 
    - 조건이 맞지 않으면 수행문이 수행되지 않음 
    - 주로 조건식이 true, false로 나타남	
  - do-while문 
    - 하나의 조건에 대해 반복수행이 이루어질 때 사용 
      단, 수행문이 반드시 한번 이상 수행됨.
  - for 문 
    - 수의 특정 범위, 횟수와 관련한 반복수행에서 주로 사용
	- 배열과 함께 많이 사용 

## 무한 반복 
  - while(true) { 수행문 };  // 가장 많이 사용 함.
  - do { 수행문; } while(true);
  - for (;;) { 수행문; }  
	
## 중첩된 반복문 (nested loop)
  - 반복문 내부에 또 반복문이 사용 됨.
  - 구구단의 예
     
## continue 문 
  - 반복문과 함께 쓰이며, 반복문 내부 continue 문을 만나면 이후 반복되는 부분을 수행하지 않고 
    조건식이나 증감식을 수행함.
  - 1부터 100까지 중 홀수만 더하는 예

## break 문
  - 반복문에서 break 문을 만나면 더 이상 반복을 수행하지 않고 반복문을 빠져 나옴
  - 중첩된 반복문 내부에 있는 겨우 가장 가까운 반복문 하나만 빠져 나옴.


제2장 자바의 핵심 - 객체지향 프로그래밍 

5. 클래스와 객체 
## 객체 지향프로그래밍과 클래스 
  - 객체(Object)란?
    - "의사나 행위가 미치는 대상" - 사전적 의미
    - 구체적, 추상적 데이터 단위 
  - 객체지향프로그래밍(Object Oriented Programming, OOP) 
    - 객체를 기반으로 하는 프로그래밍 
	- cf. 절차 프로그래밍(Procedural Programming), C언어

## 생활 속의 객체 예
  - 학교 가는 과정에 대한 절차적 프로그래밍
    - 일어남 -> 씻는다 -> 밥먹음 -> 버스 탐 -> 요금 지불 -> 학교 도착 : 시간의 흐름에 따른 프로그래밍 
  - 학교 가는 과정에 대한 객체 지향 프로그래밍 
    - 객체를 정의 
    - 객체의 기능 구현
    - 객체 사이의 협력 구현 	

## 클래스(class)
  - 클래스란?
    - 객체에 대한 속성과 기능을 코드로 구현 한 것
    - "클래스를 정의 한다" 라고 함
    - 객체에 대한 청사진(blueprint) 
  - 객체의 속성 
    - 객체의 특성, 속성, 멤버 변수 
    - property, attribute, member variable 
  - 객체의 기능 
    - 객체가 하는 기능들을 메서드로 구현 
    - method, member function 

## 클래스 정의 하기 
  - (접근자 제어자) class 클래스 이름 {
		멤버 변수;
		메서드;
	}
  - class 이름은 대문자로 시작 	
  - 학생 클래스의 예 
    - 속성 : 학번, 이름, 학년, 사는 곳 등  
	- 기능 : 수강신청, 수업듣기, 시험보기 등
  - class는 대부분 대문자로 시작 
  - 하나의 java 파일에 하나의 클래스를 두는 것이 원칙이나, 여러 개의 클래스가 같이 있는 경우 public 클래스는 
    단 하나이며, public 클래스와 자바 파일의 이름은 동일해야 함. 
  - 자바의 모든 코드는 class 내부에 위치 	
  
## 클래스의 속성
  - 클래스의 특징을 나타냄 
  - property, attribute라고도 함.
  - 자료형을 이용하여 멤버 변수로 선언 

## 자바 네이밍 
  - pagkage : 모두 소문자
  - class   : 대문자로 시작해서 단어가 바뀔때마다 대문자로 시작 
  - 변수     : 소문자로 시작해서 단어가 빠뀔때마다 대문자로 시작 
  - 메서드    : 소문자로 시작해서 단어가 빠뀔때마다 대문자로 시작
  
## 패키지
  - 소스의 묶음 - 패키지 구조는 소스를 어떻게 유지보수 할지 하이라키 구조로 만듬. 
  - 소스코드를 어떠한 계층 구조로 관리할 지 구성하는 것.
  
## 메서드 
  - 함수의 일종 
  - 객체의 기능을 제공하기 위해 클래스 내부에 구현되는 함수   
  - 함수란?
    - 하나의 기능을 수행하는 일련의 코드
	- 중복되는 기능은 함수로 구현하여 함수를 호출하여 사용함

## 함수 정의 하기
  - 함수를 코드로 구현 
  - 함수의 이름, 매개변수, 반환값을 선언하고 코드를 구현 함.
  - int add(int num1, int num2) {
		int result;
		result = num1 + num2;
		return result;
	}
  - 함수반환형 : 반환값의 자료형을 나타냄. 반한값이 없는 경우 void라고 씀.	 
  
## 함수와 스택 메모리 
  - 함수가 호출될 떄 사용하는 메모리 - 스택(stack)
  - 함수의 기능 수행이 끝나면 자동으로 반환되는 메모리 
  - 함수 호출과 스택 메모리 구조   
    
## 클래스에서 메서드 구현하기 
  - 클래스의 메서드는 멤버 변수를 사용하여 기능 구현 
  - 학생의 이름을 반환하는 메서드 
  
  