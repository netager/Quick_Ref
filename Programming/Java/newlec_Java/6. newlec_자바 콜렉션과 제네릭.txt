## 01. 학습 개요 
	- 콜렉션이란?
		- 데이터를 수집하고 관리해주는 객체 
		
## 02. 정수형 콜렉션 구현하기 	

## 03. Object 클래스의 필요성 - Object 형식
	- 모든 데이터를 목록으로 관리할 수 있는 자료형식이 있나요?
	- 최상위 추상 클래스
		- 모든 클래스는 Object이다. 그럼 primitive 형식과의 관계는?
			-	Object <--- Exam <--- NewlecExam
			-	NewlecExam r1 = new NewlecExam();
				Exam r2 = new NewlecExam()
				Object o1 = new NewlecExam();
			
			-	Object[] list = new Object[10];
				list[0] = r1;
				list[1] = "hello";
	- 모든 객체를 묶을 수 있는 범용 자료형식
		- 	Object[] list = new Object[10];
			list[0] = "Good";
			list[1] = new Exam();
			list[2] = "Hello";
			list[3] = new NewlecExam();
			list[4] = 3; (X) 기본형식은 참조형식이 아니라 OBject 에 담을 수 없음.

## 04. Wrapper 클래스와 Auto Boxing/UnBoxing
	- 최상위 추상 클래스 
		- 모든 클래스는 Object이다. 그럼 primitive 형식과의 관계는?
			-	Object obj = 3; --> 이것을 가능하게 하려면?
				--- Boxing ---> Object obj = new Integer(3);
				- java1.5버전부터 Object obj = 3;을 자동으로 Boxing 됨.
				--- UnBoxing ---> int x = obj.intValue();
				- 지금은 UnBoxing도 자동으로 실행됨.
	- Boxing에 사용되는 Wrapper 클래스 
				Object 	<--- Number	<--- Byte
									<--- Integer
									<--- Short
									<--- Long
									<--- Double
									<--- Float
						<--- String 
	- 모든 클래스의 공통분모
		- 모든 데이터를 단일하게 일괄 관리하기 위한 방법이 필요하다.
			-	int x = 3;
				float y = 3.5f;
				char c = 'a';
				double d = 4.7;
				Record r = new Record(1,1,1);
	- Wrapper 클래스가 필요한 이유는 
		- 모든 객체와 값을 일괄적으로 관리할 수 있도록
			-	Object[] data = new Object[5];
				data[0] = x;
				data[1] = y;
				data[2] = c;
				data[3] = d;
				data[4] = r;

## 05. Object 콜렉션으로 변경하기 
	- 범용 콜렉션의 필요성 

## 06. Generic 이란?
	- 범용 콜렉션의 필요성
		- 범용 콜렉션의 장점과 특화된 클래스의 장점을 모두 겸비한 Template
			-	public class [  ] List {
					private Object [] datas;
					private int current;
					private int capacity;
					private int amount;
					...
	- Generic : 무엇이든 될 수 있다.
			- 	public class List<T> {
					private Object [] datas;
					private int current;
					...
	
## 07. 연습문제: 가변크기 컬렉션으로 변경하기 
	- 가변적으로 데이터를 수집하기 위해 배열을 이용하는 방법
		- 데이터 수집을 위한 필수 필드 
			-	Object[] object = new Object[1000];
				int current = 0;
	- 정적인 크기의 배열을 동적인 크기로 만들기 
		- 어느 방법이 더 많은 장점을 가질까?
			- 충분히 큰 크기를 마련하는 방법 : 초기 크기(1000)
			- 공간이 모자라면 늘리는 방식
				- capacity : 초기의 값 
				- amount : 늘려가는 값
	- 동적인 공간을 관리하기 위해 필요한 capacity 변수 
		- 용량(capacity)이 변하기 때문에 새로운 변수가 빌요함.
			- capacity : 초기값
			- current  : 현재 가지고 있는 값
			- amount   : 늘려가는 값

## 08. 가변크기 컬렉션으로 변경하기 
	- 

## 09. Java Collection 프레임워크 - 자바언어에 포함된 콜렉션 프레임워크 
	- 자바 콜렉션의 3대 계보
		- Collection	<--- Set	<--- HashSet
						<--- List	<--- ArrayList
									<--- LinkedList
									<--- Stack
						<--- Queue	
		- Map	<--- HashMap
	
	- 배열에 값을 저장하는 일반적인 방법 
		- 선형 데이터 구조 
	- 배열에 값을 저장하는 다른 방법 
		- 비선형 데이터 구조 : Tree 모양 
		- 선형 데이터 구조 : 링크(참조, 포인터 등)로 연결된 데이터 
	- 자바 콜렉션 상속과 구현관계 

## 10. Set/List/Map 콜렉션 
	- 자바 콜렉션의 3대 계보
		- Set 	- HashSet
		- List 	- ArrayList
		- Map 	- HashMap
	
	
			
			
				
				
				
			
				
	
	