## 1. 자바 프로그램밍
	- 프로그래밍과 프로그래밍 언어
		- 모든 버전의 공통분모인 자바 프로그램밍
		- 동일한 프로그램이지만 방법을 달리 만들 수 있다.
			- 자바 프로그래밍 ---> 구조적인 ---> 객체지향 
			
## 2. 윈도우즈에 OpenJDK 8 설치하기 
 	- 컴파일러 다운로드
		- 두 가지 버전의 컴파일러 
			- oracle java - 유료화
			- OpenJDK  - jcp.org
		- 다운로드 사이트
			- https://github.com/ojdkbuild/ojdkbuild
		- Window Path 설정	

## 3. 자바 코드 처음으로 컴파일과 실행하기 
	- 자바 코드의 기본 규칙 
	- 컴파일 : javac Program.java 
	- 실행  : java Program
	
## 4. 자바 IDE 이클립스 설치하기 

## 5. 자바 IDE 이클립스 사용하여 코딩하기
	- Project를 생성하는 이유 
		- 이클립스 필요에 의해서 생성 
	- Ctrl + Shift + F
	- Alt + 이동키

## 6. 자바 언어의 특징 
	- Green Project(Stealth Project)
		- Digital TV - 양방향 TV - TV에 프로그램밍 - 나중에 다양한 가전에 프로그램 이식 --> "Green Project"
				- C++ 언어로 작성하려 했으나 문제가 있어 Java 프로그램 개발 
	- 자바는 C++ 언어에서 파생된 언어 
		- Fortran  ---> Algol 58 ---> CPL ---> BCPL
		- B ---> C ---> C with Class ---> C++ ---> Java
											  ---> Go
											  ---> C# 
		           ---------------------> Objective-C ---> Swift
                        Cmm ---> LiveScript ---> Javascript				   
    - C/C++ 언어가 가지는 문제점들 
		- 객체 생성과 제거               ---> delete 키워드 제거 
		- 참조변수와 포인터 변수           ---> 객체의 포인터 제거 
		- 이차 이상의 포인터 문제          ---> 모든 포인터 제거 
		- 데이터 구조를 정의하는 두 가지 방법  ---> struct 키워드 제거
		- 함수지향? 객체지향?             ---> 함수는 메소드만 사용하도록 제약 
		- 컬렉션의 부재                 ---> 언어에 컬렉션을 포함 
		- 글로벌한 문자 데이터처리의 복잡성    ---> 다양한 인코딩 문자열 기능 개선
		
	- 자바 언어의 특징	
		- 간결성
		- 언어에 컬렉션 포함 
		- 완전한 객체지향 언어 
		
## 7. 자바 플랫폼(Platform)의 특징
	- 새로운 WORA API의 탄생 - platform independent 
		- A 운영체제, B 운영체제, C 운영체제(운영체제별 API가 다름) ---> 자바플랫폼 ---> 자바코드 
		- 단점
			- 특정 운영체제에서만 가지고 있는 특징을 자바 플랫폼에 다 구현 하지 못함.
			- 자바 플랫폼을 설치해야 함.
		
## 8. 자바 번역기의 특징 
	- WORA를 지원하기 위한 자바 프로그래밍 방법
		- 자바코드 ---> 번역기(어셈블코드) ---> 번역기(기계(이진)코드
		- 1단계(형태소 분석) -> 2단계(구문분석) -> 3단계(의미분석) -> 4단계(중간코드) -> 5단계(최적화) -> 6단계(물리코드)
		  ------- 컴파일러 사용 -----------------------------------> ---- 인터프리터 사용 ------------>
	
		- 자바코드 -> 번역기 -> 바이트코드(중간코드, 가상CPU 코드, 수도코드) -> 번역기 -> 어셈블코드 -> 번역기 -> 기계(이진)코드
		  <-------- JDK(Java Development Kit) ---> <---- JRE(Java Runtime Environment) ------->

## 9. 값의 종류와 표현방법 
	- 정수값 - int, long -  26, 0x1a, 032, 0b11010
	- 실수값 - flaot, double - 123.4d, 1.234e2, 1.234e2f, 1.234e2d
	- 문자값
		- 'A'. '\u0065'
	- 진리값 - true, false

## 10. 값의 진법 변환

## 11. 값의 형식명칭과 형식변환
	- 값의 종류와 형식명칭
		- 정수 형식과 변환
			- byte   : 1byte - 26
			- short  : 2byte - 26
			- int    : 4byte - 26
			- long   : 8byte - 26L
			- long x = 30;
				- long x = 30L 이 표현이 맞지만 묵시적으로 30L로 변환됨
			- byte x = 30;
				- 묵시적으로 변경하지 않음 - 컴파일시 형식이 맞지 않다고 오류
				- 개발자가 byte x = (byte)30; - 개발자가 명시적으로 형식 
		- 실수 형식 
			- 26.5 = 2.65e1
			- float x = 3.5;   ---> float x = (float)3.5;
			- double x = 3.5f;
		
		- 문자형식
			- char 
		
		- 부울형식
			- boolean 

## 12. 정수 값의 크기와 범위 
	- 

## 13. 부동 소수점(Float Point) 실수의 크기와 범위 
	- 