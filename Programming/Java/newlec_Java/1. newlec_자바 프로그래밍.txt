## 1. 자바 프로그램밍
	- 프로그래밍과 프로그래밍 언어
		- 모든 버전의 공통분모인 자바 프로그램밍
		- 동일한 프로그램이지만 방법을 달리 만들 수 있다.
			- 자바 프로그래밍 ---> 구조적인 ---> 객체지향 
			
## 2. 윈도우즈에 OpenJDK 8 설치하기 
 	- 컴파일러 다운로드
		- 두 가지 버전의 컴파일러 
			- oracle java - 유료화
			- OpenJDK  - jcp.org
		- 다운로드 사이트
			- https://github.com/ojdkbuild/ojdkbuild
		- Window Path 설정	

## 3. 자바 코드 처음으로 컴파일과 실행하기 
	- 자바 코드의 기본 규칙 
	- 컴파일 : javac Program.java 
	- 실행  : java Program
	
## 4. 자바 IDE 이클립스 설치하기 

## 5. 자바 IDE 이클립스 사용하여 코딩하기
	- Project를 생성하는 이유 
		- 이클립스 필요에 의해서 생성 
	- Ctrl + Shift + F
	- Alt + 이동키

## 6. 자바 언어의 특징 
	- Green Project(Stealth Project)
		- Digital TV - 양방향 TV - TV에 프로그램밍 - 나중에 다양한 가전에 프로그램 이식 --> "Green Project"
				- C++ 언어로 작성하려 했으나 문제가 있어 Java 프로그램 개발 
	- 자바는 C++ 언어에서 파생된 언어 
		- Fortran  ---> Algol 58 ---> CPL ---> BCPL
		- B ---> C ---> C with Class ---> C++ ---> Java
											  ---> Go
											  ---> C# 
		           ---------------------> Objective-C ---> Swift
                        Cmm ---> LiveScript ---> Javascript				   
    - C/C++ 언어가 가지는 문제점들 
		- 객체 생성과 제거               ---> delete 키워드 제거 
		- 참조변수와 포인터 변수           ---> 객체의 포인터 제거 
		- 이차 이상의 포인터 문제          ---> 모든 포인터 제거 
		- 데이터 구조를 정의하는 두 가지 방법  ---> struct 키워드 제거
		- 함수지향? 객체지향?             ---> 함수는 메소드만 사용하도록 제약 
		- 컬렉션의 부재                 ---> 언어에 컬렉션을 포함 
		- 글로벌한 문자 데이터처리의 복잡성    ---> 다양한 인코딩 문자열 기능 개선
		
	- 자바 언어의 특징	
		- 간결성
		- 언어에 컬렉션 포함 
		- 완전한 객체지향 언어 
		
## 7. 자바 플랫폼(Platform)의 특징
	- 새로운 WORA API의 탄생 - platform independent 
		- A 운영체제, B 운영체제, C 운영체제(운영체제별 API가 다름) ---> 자바플랫폼 ---> 자바코드 
		- 단점
			- 특정 운영체제에서만 가지고 있는 특징을 자바 플랫폼에 다 구현 하지 못함.
			- 자바 플랫폼을 설치해야 함.
		
## 8. 자바 번역기의 특징 
	- WORA를 지원하기 위한 자바 프로그래밍 방법
		- 자바코드 ---> 번역기(어셈블코드) ---> 번역기(기계(이진)코드
		- 1단계(형태소 분석) -> 2단계(구문분석) -> 3단계(의미분석) -> 4단계(중간코드) -> 5단계(최적화) -> 6단계(물리코드)
		  ------- 컴파일러 사용 -----------------------------------> ---- 인터프리터 사용 ------------>
	
		- 자바코드 -> 번역기 -> 바이트코드(중간코드, 가상CPU 코드, 수도코드) -> 번역기 -> 어셈블코드 -> 번역기 -> 기계(이진)코드
		  <-------- JDK(Java Development Kit) ---> <---- JRE(Java Runtime Environment) ------->

## 9. 값의 종류와 표현방법 
	- 정수값 - int, long -  26, 0x1a, 032, 0b11010
	- 실수값 - flaot, double - 123.4d, 1.234e2, 1.234e2f, 1.234e2d
	- 문자값
		- 'A'. '\u0065'
	- 진리값 - true, false

## 10. 값의 진법 변환

## 11. 값의 형식명칭과 형식변환
	- 값의 종류와 형식명칭
		- 정수 형식과 변환
			- byte   : 1byte - 26
			- short  : 2byte - 26
			- int    : 4byte - 26
			- long   : 8byte - 26L
			- long x = 30;
				- long x = 30L 이 표현이 맞지만 묵시적으로 30L로 변환됨
			- byte x = 30;
				- 묵시적으로 변경하지 않음 - 컴파일시 형식이 맞지 않다고 오류
				- 개발자가 byte x = (byte)30; - 개발자가 명시적으로 형식 
		- 실수 형식 
			- 26.5 = 2.65e1
			- float x = 3.5;   ---> float x = (float)3.5;
			- double x = 3.5f;
		
		- 문자형식
			- char 
		
		- 부울형식
			- boolean 

## 12. 정수 값의 크기와 범위 
	- 

## 13. 부동 소수점(Float Point) 실수의 크기와 범위 
	- 

## 14. 자바 변수 선언
	- 선언이란? 모든 키워드는 선언하고 사용해야만 한다.
	- 변수란? - 값을 저장하기 위한 공간
	- 변수 명명 규칙
		- 

## 15. 출력 스트림 객체와 API 
	- 입/출력 장치를 위한 인터페이스의 필요성 
	- 자바 플랫폼의 내장 입/출력 객체와 멤버 함수 
		- System.out.write()/print()/ println()/printf()
		- System.in.read()/skip()/reset()
	- 출력 스트림(Output Stream)을 이용한 비동기 처리 
	- 출력 버퍼 - OutputStream 
	
	- 개체(Entity) 와 객체(Object)
		- 객체 - 실존하는 것, 실체
	- 객체를 이용하는 함수 
		- 

## 16. 콘솔 출력과 문자코드 
	- 단방향 버퍼라서 Stream이라고 칭함. 
	
		- 키보드 입력 - 키코드가 버퍼에 들어감.
		- 출력
	- ASCIII(American Standard Code for Information Interchange)
		- 7bit 코드표
	- 각국의 문자코드 확장 
		- EUC-KR, EUC-JP, EUC-CN
			- ASCII + KR 
		- UNICODE
			- ASCII + KR + JP + CN 
	- 문자 출력 
		- System.out.write(3); 
			- 3을 출력하면 이상하게 출력
		- System.out.flush(); - 버퍼에서 강제로 출력
			
		- System.out.write(51); or System.out.write('3'); - 숫자 3을 출력
		- System.out.flush();
		
		- 3 vs '3'
    - 실습 : ex1.io.Program.java		

## 17. 콘솔 문자열 출력 - PrintStream	
	- System.out = new PrintStream(new OutputStream());
		- System.out.print("hello");
		- System.out.print(3.45);

## 18. Escape 문자		

## 19. 출력 문자열 format과 숫자 출력 - printf
	- 성적 출력
		- 출력 포맷을 이용한 출력 
	- 포맷 문자열과 형식 지정자 
		- 값의 표현 방식을 지정하는 코드 
			- string : %s
			- float : %f 
			- character : %c
			- d - 정수(10진수) - %5d
			- x - 정수(16진주) - %x
			- o - 정수(8진수)  - %o
			- f - 실수        - %7.2f
			- e - 지수형 실수   - %e
			- c - 문자        - %c
			- s - 문자열       - %10s

## 20. 형식지정자 옵션 
	- 고정길이 출력하기 
		- 형식 지정자 옵션을 이용한 출력 
			- %(Begin Format Specifier) 1$(Argument Index) +0(Flags) 20(Width) .10(Precision) f(Conversion)
			
	- 실수의 연산
		- total / 3   ---> 정수를 정수로 나누면 소수점은 짤리고 정수 부분만 나옴
		- avg = total / 3.0; ---> 3.0 은 double 형. 정수를 double형으로 나누는 결과가 되면 묵시적으로 total 정수는 double로 형변환
		                          묵시적으로 double형을 double 형으로 나누면 double형으로 나옴. 이를 float형인 avg에 저장하는 결과가 되므로 에러 발생.
        - avg = (float)total / 3.0; ---> total 을 float형으로 형변환함. float형을 double형으로 나누어 float형인 avg에 저장.
		- avg = (float)(total / 3.0); ---> 명시적으로 계산결과를 float형으로 형변환하고 이를 float형인 avg로 저장 
		- avg = total / 3.0f; ---> 정수를 float형으로 나누는 결과가 되면 묵시적으로 total 정수는 float형으로 형변환

## 21. 콘솔 입력미래에셋증권 연금자산관리센터 바로가기
	- InputStream과 객체 생성 
		- System.in
			- int code = System.in.read() - 1byte에 해당하는 코드값을 입력 
			- System.out.println(code);
			- System.out.write(code);
			- System.out.flush();
			
	- 문자열 형태로 read
		- System.in
			- read()
			- skip()
		- Scanner scan = new Scanner(System.in);
			- nextLine() - buffer에 있는 모든 문자 read
			- next() - 단어 별로 read
			- nextInt()
			- nextFloat()
			- nextDouble(0
			
## 22. 산술 연산자(Operators)
	- 
## 23. 비교/관계 연산자
	- 비교 연산자
		- ==, !=, >, >=, <, <=
	- 논리 연산자 
		- &&(and), ||(or)
			- 
## 24. 비트 연산자
	- 비트 논리 연산자
		- & : 비트 교집합 연산자
			- 3 & 7 ---> 0011 & 0111 ---> 0011
		- | : 비트 합집합 연산자
			- 3 | 7 ---> 0011 | 0111 ---> 0111
		- ^ : 비트 차집합 연산자 
			- 3 & 7 ---> 0011 ^ 0111 ---> 0100 - 차이가 있으면 True(1)
		- ~ : 비트 부정 연산자 
			- ~3 ---> ~0011 ---> 1100
	- 쉬프트 연산자
		- << : 왼쪽 쉬프트 연산자   : value <<2
			- 3<<2 ---> 0011<<2 ---> 1100 ---> 12  : 마지막 글자가 0이든 1이든 상관없이 0으로 채워짐.
		- >> : 오른쪽 쉬프트 연산자  : value >>2
			- 3>>2 ---> 0011>>2 ---> 0000 ---> 0
			- 11>>2 ---> 1011>>2 ---> 1110 ---> 14 : 특이하게 앞글자가 1이면 1로 채워짐. 음수를 표현하는 방식에서 맨앞의 기호는 부호비트여서 1로 채워짐.
	- 어디에 사용할까?
		- 한 변수에 두 개의 값을 대입하기 
			- x = 7;, y = 5;
			- 오목게임의 좌표를 2byte(short pos;)를 이용해서 표현 
				- 먼저 pos = (7<<8);
				- pos = pos | 5;  ---> 2개의 수를 short형(2byte) 변수에 저장 됨.
				
			
	
		