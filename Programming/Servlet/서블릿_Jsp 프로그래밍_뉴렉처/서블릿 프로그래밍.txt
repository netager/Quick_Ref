# Servlet/JSP 프로그래밍 - 뉴렉처 (www.newlecture.com)

## 00. 이클립스 핫키
	- 실행 : Ctrl + F11
	- Ctrl + Shift + o : 사용 모듈 import
	- Ctrl + Space : 자동 완성 
	

## 01. 학습안내
 - 자바 웹 프로그램
   - [ 서블릿 - JSP - JSP MVC ] - Spring MVC

## 02. 웹서버 프로그램이란
	- 일반 업무용 프로그램
	- CS(클라이언트 / 서버) 프로그램 - 소켓, RPC - 데이터를 전달
	- 웹(클라이언트 / 서버) 프로그램 - 문서를 전달
      - http://www.newlecture.com/page
	 
## 03. 웹서버 프로그램 과 Servlet
	- 웹 기반의 클라이언트/서버 프로그램
	  - http://www.newlecture.com/member/list
	  - 동정 처리 : WEB 서버 + WAS(Web Application Server)
	
	- 왜 웹 서버 응용 프로그램을 Servlet이라 명칭할까?
	  - GET : list/reg/edit/del
	  - Server Application Let

## 04. 톰캣9 설치하기
	- 톰켓 홈페이지에서 버전 9 다운로드
	  - zip 형태와 installer 형태가 있음 - zip 으로 받고 사용자 홈에 설치 - bin/startup.bat 실행
	  - installer 버전은 윈도의의 서비스에 등록되어 윈도우 부팅시 자동 기종 가능
	  
	- 톰켓 기동 : bin/startup.bat

## 05. 톰캣 9 설치하기 # 2 of 3 - 웹문서 추가해 보기	
	- nana.txt 파일 생성하여 http://localhost:8080/nana.txt 로 불러오기
	
## 06. 톰캣 9 설치하기 # 3 of 3 - Context 사이트 추가하기
	- Context 사이트 개념
		- http://IP(or hostname):Port/context/리소스들
	    - localhost:80/admin/index
		              /dealer/...
					  /community/...
					  /academy/...     --> /academy 를 별도의 서버(사이트)로 분리하지만 한개의 사이트 처럼 운영
		- 물리적으로 2개의 사이트이지만 1개의 사이트 처럼 관리 : Context Name (/academy)
		- 규모가 커지면 파일수가 많아지고 디렉토리도 많아짐
	- Context 사이트 추가
		- conf/server.xml 편집
			- <context path="it" docBase="C:\Users\User\apache-tomcat-9.0.62\webapps\ITWeb" privileged="true" />
		- 톰켓 서버 재시작
		- http://localhost:8080/it/news.txt 로 접속
			- 실제로 홈에 "it" 디렉터리가 없지만 있는 것 처럼 연결 됨

## 07. 처음으로 서블릿 프로그램 만들어 보기
	- Nana.java 만들어서 c:\jsp 폴더에 저장
	- 컴파일 
		- javac -cp C:\Users\User\apache-tomcat-9.0.62\lib\servlet-api.jar Nana.java

## 08. 서블릿 객체 생성과 실행 방법
	- 컴파일한 Nana.class 를 "C:\Users\User\apache-tomcat-9.0.62\webapps\ROOT\WEB-INF\classes"에 복사
	- "C:\Users\User\apache-tomcat-9.0.62\webapps\ROOT\WEB-INF\web.xml" 파일 수정
		-  	<servlet>
				<servlet-name>na</servlet-name>
				<servlet-class>Nana</servlet-class>
			</servlet>
  
			<servlet-mapping>
				<servlet-name>na</servlet-name>
				<url-pattern>/hello</url-pattern>
			</servlet-mapping>
	- 톰캣 재기동

## 09. 서블릿(Servlet) 문자열 출력
	- c:\jap\Nana.java 수정
	- java compile
	- c:\jap\Nana.class WEB-INF\classes\ 폴더에 복사
	- 톰캣 재시작
	- localhost:8080/hello

## 10. 웹 개발을 위한 이클립스 IDE 준비하기
    - Eclipse IDE for Enterprise Java Developers 2020-06 바전까지 JAVA 8 지원함.
	- 서블릿 개발 및 배포 과정
		- 코드수정 -> 컴파일 -> 배포 -> 톰캣 서버 재시작 -> 브라우저로 요청
	- 이클립스를 사용하면 Ctrl + F11로 한번에 끝남
	- 웹 개발을 위한 이클립스 : Eclipse for Enterprise Java Developers
	- 이클립스 실행
	  - workspace 지정 : c:\jsp\workspace
	- 이클립스에 프로젝트 생성
		- "File" -> "New" -> "Dynamic Web Project"
			- Project name : JSPPrj
			- Target runtime : Apache Tomcat 9.0
				- Tomcat installation directory : C:\Users\User\apache-tomcat-9.0.62

## 10. 보충강의 - JSP 프로젝트의 web.xml에서 빨간색 밑줄로 오류가 발생한다면
	- src/main/webapp/WEB-INF/web.xml 파일에서 http -> https로 변경
				
## 11. 이클립스를 이용한 서블릿 프로그래밍
  - 크롬이나 다른 브라우저로 바꾸기 
	- [Window] - [Web Browser] - "Default system web browser" 선택
	- 프로젝트명을 컨텍스트명으로 사용하지 않고 ROOT로 사용하는 방법
		- [Project Explorer] - [해당 Project 오늘쪽 마우스 클릭] - [Properties] - 
		  [Web Project Settings] - Context root : / 로 변경
		- [Servers]에서 프로젝트 [Synchronized] 삭제후 Ctrl + F11 수행
		

## 12. 어노테이션을 이용한 URL 매핑
	- Nana.java 소스 맨위에 @WebServlet("/hello")
		- 어노네티션을 사용하려면 web.xml에서 설정 필요 (서블릿 3.0 이상)
			- <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
				version="4.0"
				metadata-complete="true">  
		    - 위에 true 를 false로 변경해 주어야 함
		- 원래는 web.xml 에서 설정해 주었음
	- 여럿이서 웹프로그램을 개발하는 경우 web.xml을 수정하는 경우 번거롭지만 어노테이션을 사용하면 쉽게 설정 가능함
	
## 13. 서블릿 출력 형식을 지정해야 하는 이유
	- 브라우저에 컨텐츠 형식을 알려주지 않은 경우 : 자의적인 해석 - 크롬의 경우 text로 해석

## 14. 한글과 콘텐츠 형식 출력하기
	- 한글이 깨지는 이유 두가지
		- 서버에서 한글을 지원하지 않는 문자코드로 인코딩한 경우 - 
			- 클라이언트(브라우저): ISO-8859-1    <-----------   웹서버: ISO-8859-1
			- 톰캣은 기본 인코딩으로 ISO-8859-1 사용함
		
		- 서버에서는 UTF-8로 인코딩해서 보냈지만 브라우저가 다른 코드로 잘못 해석한 경우
			- 클라이언트(브라우저): EUC-KR        <-----------   웹서버: UTF-8
	
	- 한글 인코딩 처리
		- response.setCharacterEncoding("UTF-8"); // 한글 인코딩 처리
		
		  // 브라우저에게 문자 인코딩 방식 알려줌
		  // HTTP Response Header의 ContentType에 해당값 설정
		- response.setContentType("text/html; charset=UTF-8"); 

## 15. GET 요청과 쿼리스트링
	- GET 요청
		- 무엇을 달라고 하는 요청에는 옵션이 있을 수 있다.
			- http://localhost/hello                 --- GET ---> hello 문서 생성
			- http://localhost/hello?cnt=3           --- GET ---> hello 문서 생성
				- cnt=3 : query string(쿼리스트링)
				
## 16. 기본값 사용하기
	- 전달되는 입력 값의 형태
		- 쿼리스트링을 다음처럼 사용할 경우에 전달 되는 cnt 값은 ...
			- http://.../hello?cnt=20    ---> getParameter("cnt") ---> "20"
			- http://.../hello?cnt=3     ---> getParameter("cnt") ---> "3"
			- http://.../hello?cnt=      ---> getParameter("cnt") ---> "" 
			- http://.../hello?          ---> getParameter("cnt") ---> null
			- http://.../hello           ---> getParameter("cnt") ---> null
			
## 17. 사용자 입력을 통한 GET 요청
	- 반복횟수를 사용자로부터 입력 받으려면 입력폼을 준비해야 한다
	
	- 이클립스에서 HTML 파일 생성시 charset="EUC-KR"로 나오는데 파일 생성시 "UTF-8"로 생성하는 방법
		- [Window] - [Preferences] - [Web] - [HTML Files] - Encoding을 "UTF-8"로 변경
		                                   - [CSS Files]  - Encoding을 "UTF-8"로 변경
										   - [JSP Files]  - Encoding을 "UTF-8"로 변경
										   

## 18. 입력할 내용이 많은 경우는 POST 요청
	- POST 요청의 일반적인 요청 방식
		- 요청과 제출, 두 단계로 나누어서 일을 처리하려고 할 때의 두 가지 요청
			- 햄버거를 주문을 위한 주문서를 주세요 --- GET --->
			- 이 내용대로 주세요
				- 양파=빼고&고기=중간&치즈=반만&상추=... --- POST --->

## 19. 한글 입력 문제
	- 멀티 바이트 문자 전송문제 : 사용자로부터 값 입력 받아서 전송하기
		- 입력: UTF-8  --- POST(URL Encoding, 한글 1자당 2Byte) ---> 웹서버
		- 톰캣에서는 ISO-8859-1(1Byte로 문자 표현)로 문자 인코딩
	- request.setCharacterEncoding("UTF-8");
	- 톰캣 서버 설정에서 변경하는 방법(server.xml)
		- <Connector port="8080"
				     protocol="HTTP/1.1"
					 connectionTimeout="20000"
					 redirectPort="8443"
					 URIEncoding="UTF-8" />
		- 일반적으로 톰캣 server.xml을 변경하지 않음

## 20. 서블릿 필터(Servlet Filter)
	- 필터
		- 웹서버 <-> WAS  --- request  --- [Filter] --> [ Servlet Container ]
        -              <--- response --- [Filter] --  [ Servlet Container ]
	- 톰캣 기동할때 와 요청이 있을때 마다 Filter 사용 됨. 
		
## 21. 학습과제(사용자 입력을 통한 계산 요청)
	- 계산할 값을 입력 하세요 
		- x 와 y 값 입력후 "계산" 클릭하면 POST 로 올려서 [ 계산결과는 : xx ] 출력하기

## 22. 과제풀이(사용자 입력을 통한 계산 요청)
	  
## 23. 여러개의 Submit 버튼 사용하기
	- 두개의 입력을 받아 덧셈 과 뺄셈을 하는 것 - Submit 이 두개.
		- <input type="submit" name="operator" value="덧셈" />
		- <input type="submit" name="operator" value="뺄셈" />

## 24. 입력 데이터 배열로 받기
    - 클라이언트 처리
		- 	<div>	
				<input type="text" name="num" />  // 동일한 name으로 발송하면 배열로 발송됨
				<input type="text" name="num" />
				<input type="text" name="num" />
				<input type="text" name="num" />
			</div>

			<div>
		 		<input type="submit" value="덧셈" />
			</div>

	- 서버에서 배열로 받아 처리
		- String[] num_ = request.getParameterValues("num"); // 배열로 받음
		- for 문을 배열 데이터 조회
	
## 25. 상태 유지를 필요로 하는 경우와 구현의 어려움
	- 상태 유지의 필요성
		- 첫번째 입력값 입력 --> "+" 클릭 --> 두번째 입력값 입력 --> "계산" 클릭
			
	- 상태를 유지하는 방법 - 3가지
		1. application
		2. session
		3. cookie
		
## 26. Application 객체와 그것을 사용한 상태 값 저장
	- Application 저장소 : 서블릿 컨텍스트(Context)
		- 선언하기	
			ServletContext application = request.getServletContext(); // 서블릿 컨텍스트
		    
		- 가져오기
			int x = (Integer)application.getAttribute("value");
			String operator = (String)application.getAttribute("op");
			
		- 저장하기
			application.setAttribute("value", v);
			application.setAttribute("op", op);

## 27. Session 객체로 상태값 저장하기(그리고 Application 객체와의 차이점)
	- 차이점
		- Application 객체는 Application 전역에서 사용 가능하고 Session은 세션 내에서 사용가능 하다는 차이점.
		- 세션 : 현재 접속한 사용자 - 사용자별로 공간이 달라짐.
	
## 28. WAS가 현재사용자(Session)을 구분하는 방식
	- 세션 ID와 사용자 저장소 구별
		- WAS(Web Application Server) - application
		                              - 
    - SID 발급 과정									  
		- 최초에는 SID 없음. but application 공간은 사용 가능
		- WAS가 SID 발급하고 발급되면 session 저장공간 사용 가능
		- 사용자는 SID를 가지고 다녀야 함 - Cookie: JSESSIONID=xxxxx - JSESSIONID가 Session ID 임.
	- Session의 정리
	- 세션 메소드
		- void setAttributes(String name, Object value) - 지정된 이름으로 객체를 설정
		- Object getAttribute(String name) - 지정한 이름의 객체를 반환
		- void invalidate() - 세션에서 사용되는 객체들을 바로 해제
		- void setMaxInactiveInterval(int interval) - 세션 타임아웃을 정소(초)로 설정
		- boolean isNew() - 세션이 새로 생성되었는지를 확인
		- Long getCreationTime() - 세션이 시작된 시간을 반환, 1970년 1월 1일을 시작으로 하는 밀리초
		- long getLastAccessedTime() - 마지막 요청시간, 1970년 1월 1일을 시작으로 하는 밀리초
 		
## 29. Cookie를 이용해 상태값 유지하기
	- 상태 저장을 위한 값의 저장소의 특징
		- 누구나 저장할 수 있는 공간 - application 저장소
		- 개인 사물함 - 세션
		- 가지고 다니는 경우 - Cookie - 브라우저가 가지고 다님.
	
	- 쿠키 저장하기
		Cookie cookie = new Cookie("c", String.valueOf(result));
		response.addCookie(cookie);
	
	- 쿠키 읽기
	    Cookie[] cookies = request.getCookies();
		String c_ = "";
		
		if(cookies != null)
			for(Cookie cookie : cookies)
				if("c".equals(cooke.getName()))
					_c = cookie.getValue();
	
## 30. Cookie의 path 옵션
	- 쿠키를 설정할때 URL 마다 설정할 수 있음
		Cookie valueCookie = new Cookie("value", String.valueOf(v)); // 문자로만 저장 가능. v는 정수형. URL로 사용 가능한 문자만 사용
		Cookie opCookie = new Cookie("op", op);
			
		//valueCookie.setPath("/"); // 모든 경로에서 해당 쿠키 사용
		//opCookie.setPath("/");
		//valueCookie.setPath("/add"); // /add 경로에서 해당 쿠키 사용
		//opCookie.setPath("/add");
		valueCookie.setPath("/calc2"); // /calc2  경로에서 해당 쿠키 사용
		opCookie.setPath("/calc2");
	
## 31. Cookie의 maxAge 옵션
	- 브라우저가 닫혀도 유효한가?
		- maxAge를 설정하지 않으면 브라우저의 생존주기와 같음.
	    - 브라우저가 살아 있으면 IN-MEMORY, 브라우저가 닫히면 IN-FILE로 저장 
	- maxAge 옵션 설정	
		- valueCookie.setMaxAge(24*60*60); // 앞으로 24*60*60초 까지 살아 있음. 만료시간(초), 24*60*60 = 1일

## 32. Application/Session/Cookie 정리
	- 상태 저장을 위한 값의 저장소의 특징
		- application
			- 사용범위 : 전역 범위에서 사용하는 저장 공간
			- 생명주기 : WAS가 시작해서 종료할 때 까지
			- 저장위치 : WAS 서버의 메모리 
		- Session
			- 사용범위 : 세션 범위에서 사용하는 저장 공간
			- 생명주기 : 세션이 시작해서 종료할 때 까지
			- 저장위치 : WAS 서버의 메모리 
		- Cookie 
			- 사용범위 : Web Browser별 지정한 path 범주 공간
			- 생명주기 : Browser에 전달한 시간부터 만료시간까지
			- 저장위치 : Web Browser의 메모리 또는 파일
			
## 33. 서버에서 페이지 전환해 주기(redirection)
	- 페이지 전환
		- response.sendRedirect("calc2.html");

 		
## 34. 동적인 페이지(서버페이지)의 필요성 
	- 정적인 html을 보내는 것이 아니라 동적인 html을 만들어서 보낼 필요가 있음
		- 요청이 있을때 만들어 지는 문서 : 동적문서 : 서버에서 만들어지므로 서버 동적 문서 
		
## 35. 처음이자 마지막으로 동적인 페이지 서블릿으로 직접 만들기
	- 요청 Method에 따른 특화된 메소드들을 이용하기
		- init() ---> service(...) ---> doGet(...)
							       ---> doPost(...)

## 36. 계산기 서블릿 완성하기
	- 

## 37. 쿠키 삭제하기
	- 		if(operator != null && operator.equals("C"))
			expCookie.setMaxAge(0);

## 38. GET과 POST에 특화된 서비스 함수
	- @Override
		protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
			System.out.println("doPost 메소드가 호출되었습니다.");
		}
	
	  @Override
		protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
			System.out.println("doGet 메소드가 호출되었습니다.");
		}

## 39. 계산기 프로그램 하나의 서블릿으로 합치기
	- GET:/calcpage ---> 문서 생성
	  POST:/calc3   ---> 
	
## 40. JSP 시작하기 (Jasper를 이용한 서블릿 프로그래밍)
	- HTML 출력이 많은 결과 페이지
	- 서블릿 출력 코드에서 HTML을 출력하는 방법
	- Jasper가 만들어주는 서블릿 출력 코드 
		- 확장자만 jsp로 바꾸어 주면 됨.
		- add.jsp 자체가 URL명이 됨.
		- add.jsp ---> Jasper ---> [톰캣 서버 디렉토리]\work\Catalina\localhost\ROOT\org\apache\jsp\add_jsp.java
			- [톰캣 서버 디렉토리] : C:\Users\USER\Quick_Ref\Programming\Servlet\서블릿_Jsp 프로그래밍_뉴렉처\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\
						
	- 코드 블록
		<%   ...   %>

## 41. JSP의 코드 블록
	- y의 값은 : y
		1) y의 값은 : <% out.print(y) %>
		2) y의 값은 : <%= y %>
	
	- 일반적인 코드블럭은 _jspService() 내에 들어감
	
	- 클래스 멤버 메소드 정의 ~ class 내에 삽입
		
		<%!
			public int sum(int a, int b) {
				return a + b;
			}
		%>
	
	- 페이지 지시자 블럭(지시블럭)
		<%@ page language="java" contentType="text/html; charset=UTF-8"
			pageEncoding="UTF-8" %>
		
		- 서블릿에서 사용했던 방법 : jsp에서는 에러 발생 하므로 위의 지시블럭 사용함.
			<%
				response.setCharacterEncoding("UTF-8");
				response.setContextType("text/html; charset=UTF-8");
			%>
	- jsp를 java 소스로 변경되면 
		 - out.write("y의 값은 : "); // out.write() ~ 단순하게 문자만 출력
		 - out.print(y);           // out.print() ~ 다양한 type(정수, 문자열 등) 출력 가능  
## 42. JSP의 내장객체 간단히 알아보기
	- <% int page=3 %> 
		- page 변수 중복 에러 발생 - Jasper 에서 내부적으로 만든 변수 ~ 내장객체라 칭함.

## 43. JSP로 만드는 Hello 서블릿 
	- jsp 파일명은 소문자로 작성하는 것이 좋음 : URL에서 직접 call 되므로
		
## 44. 스파게티 코드를 만드는 JSP 
	- 복잡하게 만들었을 때 코드를 스파게티 코드라고 함. 또는 실타래 코드라고도 함.
    - 코드 블럭을 한 곳으로 모아 놓는것이 좋음.

## 45. JSP MVC model 1
	- 일반적인 JSP 프로그래머가 구현하는 방식의 코드 
		/*--- 입력 코드 ----------*/
		<%
		String num_ = request.getparameter("n");
		%>
		/*--- 출력 코드 ----------*/
		...
		...
		...
		<%if(num % 2 != 0) { %> 
			홀수입니다.
		<%} else { %>
			짝수입니다.
		<%} %>
		
	- 위쪽에 입력코드 출력되는 곳에 출력코드 작성	- MVC model 1 방식 ~ 변수가 더 사용됨. 	
		/*--- 입력 코드 ----------               */
		/* 출력데이터 : Model                     */
		/* 입력과 제어를 담당 : Controller [자바 코드] */
		<%
		String num_ = request.getparameter("n");
		...
		if(num % 2 != 0)
			model="홀수";
		else
			model = "짝수"
		%>

		/*--- 출력 코드 ----------    */
		/* [HTML 코드] 출력 담당 : View */
		...
		...
		...
		<%=model%> 입니다.
	
	- MVC (Model View Control)
		- Model : 출력데이터 
		- Controller : 자바코드, 입력과 제어를 담당
		- View : HTML 코드, 출력담당 
		
## 46. JSP MVC model1을 model2 방식으로		
	- model 1 : 컨트롤러와 뷰가 물리적으로 분리되지 않은 방식 - 페이지 하나에 MVC 구현 
	- model 2 : 컨트롤러와 뷰를 분리 하는 방식 
		- 컨트롤러를 미리 컴파일하기 때문에 속도가 빠름 
	- Model 2 방식 종류
		1. 사용자 ---> 톰캣 ---> Controller & Dispatcher(포워딩) ---> View(jsp)
				- Controller - Dispatcher - View
				
		2. 사용자 ---> 톰캣 ---> Dispatcher(Servlet) ---> View(jsp(servlet))
		                    Controller(일반 Class, POJO Class, 업무 Class) 
			- 디스패처 서블릿이 POJO Class를 불러서 사용
			- POJO 에서 디스패처 서블릿으로 <url-mapping> 제공
			- 톰캣 모든 URL : web.xml
	- redirect vs. forward
		- redirect : 현재 진행된 작업과 상관없이 새로운 요청을 하게하는 기능 
		- forward  : 현재 작업한 내용을 이어갈 수 있도록 뭔가를 공유하는 기능

## 47. View를 위한 데이터 추출 표현식 EL(Expression Language)
	- View 에서는 자바코드를 되도록 사용하지 않게하는 방식으로 가는 것이 MVC를 구현하는 가장 좋은 방법
	- EL(Expression Language)
		- 저장 객체에서 값을 추출해서 출력하는 표현식 
			Controller                                View
			-------------------------------           ---------------------------
			request.setAttribute("cnt",30);  --->     request.getAttribute("cnt")
			                          
									                  View(EL 표기법)
			-------------------------------           ---------------------------												  
                                                      ${cnt}

		- list type 전달												  
			Controller                                View
			-----------------------------------       --------------------------------------------
			List list = new ArrayList(){"a","b"};
			request.setAttribute("list", list);  ---> ((List)request.getAttriburte("list")).get(0)
			                          
									                  View(EL 표기법)
			-----------------------------------       --------------------------------------------												  
                                                      ${list[0]}

		- Map type 전달												  
			Controller                                View
			-----------------------------------       --------------------------------------------
			Map n = new HashMap("title","제목"};
			request.setAttribute("n", n);        ---> ((Map)request.getAttriburte("n")).get("title")
			                          
									                  View(EL 표기법)
			-----------------------------------       --------------------------------------------												  
                                                      ${n.title}

## 48. EL의 데이터 저장소 
	- 저장소 종류 
		- page 객체    - pageContext 객체를 통해서 구현. 
		- request 객체 - forward를 통해서 구현 
		- session 객체 
		- application 객체 
		
	- 만일 4개의 저장소에 cnt 라는 변수를 사용하게 되면 어케 될까?
		- 오류가 나지 않으므로 우선순위가 있다 : page -> request -> session -> spplication 
		- page 와 request에 cnt가 있는 경우  request에 있는 cnt 사용 불가
		- 이때 사용하는 메소드 
			- pageScope
			- requestScope
			- sessionScope
			- applicationScope
		- ${sessionScope.cnt}
			
	- 다양한 EL 사용 방법 
		${requestScope.result}<br >

		${names[0]}<br >
		${names[1]}<br >

		${notice.id}<br >
		${notice.title}<br >
		
		${result}<br >
		
		${param.n}<br>
		${header.host}<br>
		${header["host"]}<br>
	
	- <%=pageContext.getRequest().getMethod() %>를 EL로 표현 
	    - get만 가능함. : ${pageContext.[get과 ()생략][소문자method, ()생략]} 로 사용 가능.
		- ${pageContext.request.method}

## 49. EL 연산자
	
	EL Expression       Result
	------------------  ---------------- 
	${1 > (4/2)} 	    false
    ${4.0 >= 3}			true
	${100.0 == 100}		true 
	${(10*10) ne 100} 	false
	${'a' < 'b'}		true
	${'hip' gt 'hit'}	false 
	${4 > 3}			true
	${1.2E4 + 1.4}		12001.4
	${3 div 4}			0.75
	${10 mod 4}			2
				
	- < > <= >= 보다는 lt gt le ge 를 사용하는 것이 좋음.
	- empty 연산자 - 널이거나 빈문자이면 true 
		- ${empty param.n} 은 ${param.n == null || param.n == ''} 과 동일하게 해석

## 50. 수업용 프로젝트 준비하기
	- 

## 51. JSP를 이용해서 자바 웹 프로그램 만들기 시작
	- JSP 프로그래밍 : Jasper가 작성할 서블릿 코드에 코드 블록을 적절히 끼워 달라고 지시하는 방식 
	- 코드 블록 4종류
		- <% %>, <%= %>, <%! %>, <%@ %>

## 52. JDBC를 이용해 글 목록 구현하기 
	- oracle jdbc driver 로드 방법
		- java 환경에서는 "Build Path" 에서 오라클 jdbc driver 지정 
	    - 서블릿 환경에서는 WEB-INF\lib\ 디렉토리에 C:\app\USER\product\18.0.0\dbhomeXE\jdbc\lib\ojdbc8.jar 복사 

## 53. 자세한 페이지 구현하기 - detail.jsp 

## 54. 자세한 페이지 MVC model1으로 변경하기 - detail.jsp 	

## 55. 자세한 페이지 MVC model2 방식으로 변경하기 - detail.jsp	
	- MVC model2 방식 
		- model1 : Controller, View, Model이 한개의 jsp 내에 포함되어 있음 
		- model2 : Controller 와 View를 물리적으로 다른 파일로 분리
			- Controller : Servlet 으로 작성, DB Connect 처리, 미리  
			- View       : JSP 
			- Model      : 인터페이스 - 저장공간을 활용한 데이터 전송, Controller 와 View에 데이터 공유 
				- pageContext / request / session / application 객체 중에 request 객체를 사용하는 것이 가장 무난함.

## 56. Model 데이터를 구조화 하기 
	- 구조화된 데이터를 이용하면?
		- 데이터를 개별 개별 처리하는 것보다 묶어서 처리하면 편함.
			request.setAttribute("title", title);
			request.setAttribute("writerId", writerId);
			request.setAttribute("regdate", regdate);
			request.setAttribute("hit", hit);
			request.setAttribute("files", files);
			request.setAttribute("content", content);
		
		    -> 위의 개별 데이터를 한개로 묶어서 처리 : request.addAttribute("notice", notice);

	- 모델 데이터를 위한 클래스 정의와 사용방법의 변화
	
		- public class Notice {
			private int id;
			private String title;
			private String writer;
			private Date regdate;
			private String content;
			private int hit;
			
			public int getId() {
				return id;
			}
		--> 묶어 있는 데이터 사용 방법 : ${notice.id} // 내부적으로 getter를 이용해서 데이터 가져옴
		                        ${notice.code} 등			

## 57. 목록 페이지(list.jsp)도 MVC model2로 수정하기 
	- MVC model2
		- Controller(서블릿) 과 View(JSP)를 물리적으로 나누어서 작성
		- Model(데이터) 공유는 request를 이용하여 forward 방식으로 Controller에서 View로 전송 
			- request.setAttribute()
			- request.getRequestDispatcher("/notice/list.jsp").forward(request,  response);
		- View 에서 사용 데이터 사용 방법은 EL 표기법으로 사용가능
            - ${n.id}
		- View 에서 LIST형 처리시에는 다른 형태로 처리 
			<%
			List<Notice> list = (List<Notice>)request.getAttribute("list");
			for(Notice n : list) {
			pageContext.setAttribute("n", n);
			%>
					
			<tr>
				<td>${n.id}</td>
			</tr>
			<%}%>

## 58. View 페이지 은닉하기 
	- 은닉하기 
		- /WEB-INF/view 폴더 생성 
		- jsp 페이지 구성된 폴더를 view 폴더로 이동 : admin, member, notice, student

## 59. View에서 흐름 제어를 위한 자바 코드 블록 제거하기
	- LIST 처리시 반복처리를 위해 코드 블록 사용. 이러한 것을 태그를 이용한 제어구조로 변경

					<%
					List<Notice> list = (List<Notice>)request.getAttribute("list");
					for(Notice n : list) {
						pageContext.setAttribute("n", n);
					%>
					
					<tr>
						<td>${n.id}</td>
						<td class="title indent text-align-left"><a href="detail?id=${n.id}">${n.title} </a></td>
						<td>${n.writerId}</td>
						<td>${n.regdate}</td>
						<td>${n.hit}</td>
					</tr>
					<%} %>	
	- 자바의 반복문을 이용한 제어구조에서 태그를 이용한 제어구조로 전환 
		- <forEach> ... </forEach>
	
	- 제어 태그를 사용하기 위해서는 JSTL Library 다운로드가 필요.
		- URL : https://mvnrepository.com/artifact/javax.servlet/jstl/1.2
		- library : jstl-1.2.jar
		- WEB-INF/lib 폴더에 해당 lib 이동
		- 사용하고자 하는 jsp 파일에 설정
			- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
            - 실제 사용 방법 		
					<c:forEach var="n" items="${list}">
					<tr>
						<td>${n.id}</td>
						<td class="title indent text-align-left"><a href="detail?id=${n.id}">${n.title} </a></td>
						<td>${n.writerId}</td>
						<td>${n.regdate}</td>
						<td>${n.hit}</td>
					</tr>
					</c:forEach>

## 60. Tag 라이브러리와 JSTL(JSP Standard Tag Library)
	- 태그 라이브러이의 표준화
		- JSTL은 5가지 범주의 태그 라이브러리를 제공 
			- Core
			- Formating
			- Functions
			- SQL
			- XML
		- SQL 및 XML 태그 라이브러리는 사용하지 않는게 좋음		
	- JSTL Core 
		- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		- <c:out>
	
	- 가장 간단한 For 태그 라이브러리 만들기 위한 두 가지 코드 
		- ForTag 클래스 생성 
			- TagSupport 를 상속받아 doStartTag, doEndTag, doAfterBody 구현 
			- 태그 Descriptor를 생성하여 WEB-INF/{파일명}.tld 저장 
				- {파일명}.tld 파일 내용
					<taglib>
						<tlibversion>1.0</tlibversion>
						<jspversion>1.1</jspversion>
						..
						<uri>http://www.newlecture.com/jsp/tags/control</uri>
						...
						<tag>
							<name>for</name>
							<tagclass>
								com.newlecture.web.taglib.ForTag
							</tagclass>
						</tag>
					</taglib>

## 61. 중간 정리 
	- 서블릿 -> 자바 웹 프로그램 
	             - 웹 -> 입력/출력 - request : 입력설정, 입력값 읽기 
				               - response : 출력 설정, 출력 스트림 -> 웹문서 출력 -> 문서 기반(jsp)의 코드 블록
							                                           - 스파게티 -> MVC -> View에서 코드 블록이 꼭 필요한 경우 -> EL, JSTL

## 62. [JSTL] forEach의 속성 사용하기
	- JSTL Core
		- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		-<c:set>, <c:remove> <c:if> ....
		
    - <c:forEach> 
		<c:forEach var="n" items="${list}" begin="1" end="3" varStatus="st">
		/* request 객체의 "list" 을 "n"으로 저장 
        /* begin="1", end="3" - 인덱스 개념으로 처리(0부터 시작), 1부터 3까지의 데이터 조회, 첫번째 데이터인 인덱스 0은 제외되었음.
        /* varStatus="st"> : st를 이용하여 설정된 값 조회
		/* <td>${st.current} ${st.index} ${st.count} ${st.first} ${st.last} ${st.begin} ${st.end} ${st.step}</td>
		
		<tr>
			<td>${st.current} ${n.id}</td>
			<td class="title indent text-align-left"><a href="detail?id=${n.id}">${n.title} </a></td>
			<td>${n.writerId}</td>
			<td>${n.regdate}</td>
			<td>${n.hit}</td>
		</tr>
		</c:forEach>
	
## 63. [JSTL] forEach문으로 Pager 번호 만들기 
	- pager 번호 생성하기 
		- 번호를 만드는 매개 값 
		  - ?p=3   --- 보이는 pager ---> 1 2 3 4 5
	      - ?p=17  --- 보이는 pager ---> 16 17 18 19 20
		  - ?p=19  --- 보이는 pager ---> 16 17 18 19 20	
        - startNum을 알고 입력되는 p(페이지 번호) 를 알면 규칙을 만들 수 있다.
		- p % 5 = 17 % 5 = 2 - 1 하면 시작번호를 구할 수 있음 
			- page = 3  ---> 3 -  (3-1) % 5  ---> 1
			- page = 21 ---> 21 - (21-1) % 5 ---> 21
			- page = 14 ---> 14 - (14-1) % 5 ---> 11
			
			- startNum = page - (page-1) % 5;
	
	- Pager 만들기 코드 
	
		<c:set var="page" value="${(param.p == null)?1:param.p}" /> 
		<c:set var="startNum" value="${page-(page-1)%5}" />
	
		<ul class="-list- center">
	
		<c:forEach var="i" begin="0" end="4"> <!-- start 와 end를 이용하여 5번 반복  -->
		 
		<li><a class="-text- orange bold" href="?p=${startNum+i}&t=&q=" >${startNum+i}</a></li>
		</c:forEach>		
		</ul>

## 64. [JSTL] if 문으로 Pager 이전/다음 번호 만들기 - JSTL로 이전/다음 Pager 링크 만들기 
	- 소스코드 작성 
	
			<c:set var="page" value="${(param.p == null)?1:param.p}" /> 
			<c:set var="startNum" value="${page-(page-1)%5}" />
			<c:set var="lastNum" value="23" />

			<div>
				<c:if test="${startNum>1}">
					<a href="?p=${startNum-1}&t=&q=" class="btn btn-prev" >이전</a>
				</c:if>
				<c:if test="${startNum<=1 }">
					<span class="btn btn-prev" onclick="alert('이전 페이지가 없습니다.');">이전</span>
				</c:if>
				
			</div>
			
			<ul class="-list- center">

				<c:forEach var="i" begin="0" end="4"> <!-- start 와 end를 이용하여 5번 반복  -->
					<li><a class="-text- orange bold" href="?p=${startNum+i}&t=&q=" >${startNum+i}</a></li>
				</c:forEach>		
			</ul>
			<div>
					<c:if test="${startNum+5<lastNum}">
						<a href="?p=${startNum+5}&t=&q=" class="btn btn-next">다음 </a>
					</c:if>	
					<c:if test="${startNum+5>=lastNum}">
						<span class="btn btn-next" onclick="alert('다음 페이지가 없습니다.');">다음</span>
					</c:if>		
			</div>

## 65. [JSTL] forTokens로 첨부파일 목록 출력하기 
	- forTokens 를 사용하여 첨부파일 목록 처리 소스 
		<tr>
			<th>첨부파일</th>
			<td colspan="3" style="text-align:left;text-indent:10px;">    
			<c:forTokens var="fileName" items="${n.files}" delims="," varStatus="st">
				<a href="${fileName}">${fileName}</a>
				<c:if test="${! st.last}">
				/
				</c:if>
				
			</c:forTokens>	
			</td>
		</tr> 

## 66. [JSTL] format 태그로 날짜 형식 변경하기 

	- JSTL은 5가지 범주의 태그 라이브러리를 제공 
		- Core
		- Formating
		- Functions
		- SQL
		- XML

	- JSTL의 Formating을 이용한 날짜 형식 표현 
		- <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
		- formatDate 와 parseDate 에 대해서 Study

		- <td><fmt:formatDate pattern="yyyy-MM-dd hh:mm:ss" value="${n.regdate}"/></td>

## 67. [JSTL] 숫자 출력 형식 지정하기 - JSTL:formatNumber 
	- JSTL의 Formating을 이용한 숫자 형식 표현 
		- <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
		
		- <td><fmt:formatNumber value="${n.hit}"/></td>
		- <td><fmt:formatNumber type="number" pattern="##,####" value="${n.hit}"/></td>
		
	- 상세 포맷은 인터넷 검색

	
## 68. [JSTL] EL에서 함수 이용하기 - JSTL:functions - 문자열 포맷 
	- JSTL의 functions을 이용한 문자 형식 표현
		- <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	
		- Emamples 
		
			<c:set var="style" value="" />
										
			<c:if test="${fn:endsWith(fileName, '.zip') }">
				<c:set var="style" value="font-weight: bold; color:red;" />
			</c:if>
			
			<a href="${fileName}" style="${style}">${fn:toUpperCase(fileName)}</a>
			

## 69. 기업형으로 레이어를 나누는 이유와 설명 - 코드 분리를 위한 사전 설명
	- 정리 - 코드의 분리 : 종류  
		- 서블릿(Controller) <-- model --> 업무 서비스(트랜잭션:계좌이체() 등) <-- Entity --> 데이터서비스(DAO) <---> DBMS
		  ->  문서 출력(.jsp)

		- 서블릿(Controller, 트랙잭션(이체 등)) <-- Entity --> 데이터서비스(DAO) <-----> DBMS
		  ->  문서 출력(.jsp)

		- 서블릿(Controller) <-- model --> 업무 서비스(트랜잭션:계좌이체() 등, DB직접 처리) <-----> DBMS
		  ->  문서 출력(.jsp)
				  
## 70. 서비스 함수 찾아내기
	- 업무 서비스 분리 하기 
		- 서블릿(Controller) <-- model --> 업무 서비스(트랜잭션:계좌이체() 등, DB직접 처리) <-----> DBMS
		  ->  문서 출력(.jsp)
	- 공지 시스템
		- 공지 등록  : 관리자
		- 공지일괄공개 : 관리자
        - 공지수정   : 관리자 
        - 공지삭제   : 관리자 
	    - 공지일괄삭제 : 관리자 
		- 공지목록조회 : 사용자, 관리자 
			- 처음 요청(getNoticeList())
			- 페이지 요청(getNoticeList(int page)),
			- 검색요청(getNoticeList(String field, String query, int page)
			- getNoticeCount()
			- getNoticeCount(String field, String query)
		- 공지상세조회 : 사용자, 관리자 
			- 페이지 요청(getNotice(id)) : 사전조건 - id를 넘겨 받는다.
			- 다음 페이지 요청(getNextNotice(id))
			- 이전 페이지 요청(getPrevNotice(id))

## 71. 서비스 클래스 구현하기 
	- NoticeService.java 
	
## 72. getNoticeList 메소드의 SQL 쿼리 작성하기 - 서비스 클래스 구현을 위한 SQL 코드 작성하기 

## 73. getNextNotice 메소드의 SQL 쿼리 작성하기 

## 74. getPrevNotice 메소드의 SQL 쿼리 작성하기 

## 75. getNoticeList의 JDBC 코드 구현하기 

## 76. NoticeService 클래스 완성하기 

## 77. 목록 페이지에서 검색 추가하기 

## 78. 목록에서 페이징 구현하기 

## 79. Pager에서 현재 페이지 번호 처리

## 80. Pager에서 마지막 번호 처리하기 

## 81. 자세한 페이지 수정하기

## 82. 목록에 댓글 수를 포함하려면?  

## 83. 댓글 수를 포함하기 위한 쿼리 문제 

## 목록에 댓글 수를 포함라려면?




			


	