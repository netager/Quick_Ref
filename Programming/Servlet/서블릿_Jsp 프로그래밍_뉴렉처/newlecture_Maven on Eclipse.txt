## 1. 개요
	- 프로젝트 빌드 과정 
		- 프로젝트 생성 -> 라이브러리 설정 -> 코드 작업 -> 컴파일 -> 테스트 -> 패키지 만들기 -> 배포 -> 레포팅
	- 이클립스도 빌드 툴인가?
		- 이클립스, VS Code, IntelliJ : IDE 이다.
		- IDE 가 더 큰 개념 임. 
	- Build Tool in IDE(Eclipse, Visual Studio, etc)
		- 컴파일러, 탐색기, 콘솔, 편집기, 빌드도구
	- 최근 IDE에 프로젝트 관리와 관련되어 포함되어 있는 전문화된 도구들 
		- 이클립스 워크벤치 - 편집기, 번역기, 실행환경, 콘솔 - 빌드 툴(Maven, Gradle, Ant), 테스트(JUnit), 형상관리(Git, CVS)
	- 이클립스 빌드 툴과 Maven은 다름.
	- 이클립스가 제공하지 않는 Maven만의 기능 
		- 프로젝트 생성
		- 라이브러리 설정
		-

## 2. Maven 설치하기 
	- 이클립스와 연동하지 않고 Maven만 별도 독립적으로 사용해 보자.
	- maven 명령	
		- mvn -version
	
## 3. Maven으로 자바 프로젝트 생성하기
	- 프로젝트 디렉터리 생성 및 이동 ($HOME\Quick_Ref\Progrgramming\maven)
	- Maven 자바 프로젝트 생성 : mvn archetype:generate -DgroupId=com.newlecture -DartifactId=javaprj -DarchetypeArtifactId=maven-archetype-quickstart
		- DarchetypeArtifactId
			- 다른 사람이 만든 maven-archetype-quickstart라는 프로젝트 구조를 기본으로 프로젝트 생성
			- 내가 만든 프로젝트가 템플릿으로 만들 수 있음
		- DartifactId=javaprj
			- javaprj라는 새로운 프로젝트를 생성한다. 
		- DgroupId=com.newlecture 	
			- 프로젝트명이 중복될 수 있어 그룹 ID를 둠. 대게 도메인 명을 사용함.
	
## 4. Maven 프로젝트 컴파일과 실행 
	- maven compile
		- mvn compile 
	- 패키지 생성 : jar 파일 생성
		- mvn package 
		- jar 파일 생성 - c:\Users\USER\Quick_Ref\Programming\maven\javaprj\target\javaprj-1.0-SNAPSHOT.jar
	- jar 파일 확인 
		- 확장자를 .zip으로 바꾸어 내용을 확인 
	- jar 파일 실행 
		- %Project Home%\java -cp target\javaprj-1.0-SNAPSHOT.jar com.newlecture.App
	
## 5. Build LifeCycle과 Phase들
	- Phase - Plug-in - Goal
	- Build Lifecycle Basics
		- A Build Lifecycle is Made up of Phases
			- c:%Project Home%\mvn compile
			- c:%Project Home%\mvn test
			- c:%Project Home%\mvn package 
			
	- Default LifeCycle - <packaging>jar</packaging>에 따라 다름 in pom.xml(project object model.xml)
		
	- 단계별 실행을 담당하는 플러그인들 : mvn help:describe -Dcmd-...
		- 단계별로 실행할 수 있는 프로그램을 "Plug-in"이라고 함.
	
## 6. 이클립스 IDE로 Maven 프로젝트 임포트하기 	

## 7. 컴파일러 플러그인과 JDK 버전 변경
	- 이클립스에서 pom.xml을 변경한 경우 [ maven project ] 오른쪽 마우스 -> Maven -> Update Project 수행 해야 함.
		- JRE System Library가 [1.8]에서 [J2SE-1.5]로 변경됨을 확인(이것이 기본 버전임.) 
			- 처음에 프로젝트 만들때 quick-start 버전이 1.5로 빌드 되었기 때문임.
			
## 8. 웹 프로젝트로 변경 
	- pom.xml 변경 
		- "<packaging>jar</packaging>" ---> "<packaging>war</packaging>"
	- 이클립스에서 pom.xml을 변경한 경우 [ maven project ] 오른쪽 마우스 -> Maven -> Update Project 수행
	- web.xml 생성 
		- webapp\WEB-INF 폴더 생성 
		- %이클립스 HOME%\webapps\ROOT\WEB-INF\web.xml 을 복사해서 이클립스의 webapp\WEB-INF에 복사 
	
## 9. 라이브러리 설정하기 
	- 라이브러리는 어디로 저장될까?
		- Maven 저장소 가 있음.
		- 필요한 라이브러리가 있으면 pom.xml에 정의하면 원격의 저장소에 있는 저장소에서 로컬 저장소로 저장함.
		- 관련 라이브러리를 한곳에 저장하고 이를 프로젝트들이 공유해서 사용함.
		- 로컬 저장소 : ${user.home}/.m2/repository
		- 중앙 저장소 : Central Repository(https://mvnrepository.com/)
	- 중앙저장소에서 사용하는 라이브러리를 찾아 pom.xml에 정의하면 자동으로 다운로드 함. ---> 라이브러리를 배포환경에 상관없이 배포가능한 장점이 있음.	
		- pom.xml
			<!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jsp-api -->
			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat-jsp-api</artifactId>
				<version>9.0.62</version>
			</dependency>

## 10. 라이브러리 오류 문제 
	- 메이븐이 자동으로 라이브러리를 다운로드하다보니 다운로드중 중단되거나 깨지는 경우가 있음.
	- 확인방법
		- Maven Dependencies 에서 라이브러리들을 클릭하면 세부사항이 보여야 되는데 깨진 라이브러리는 동작하지 않음
	- 해결방법
		- 이클립스를 종료함.
		- 로컬저장소(${user.home}/.m2/repository/하위 폴더를 다 지움.
		- 이클립스를 실행하면 자동으로 라이브러리를 다운로드 함.

## 11. 라이브러리 인덱스 검색 
	- 라이브러리를 추가하는 또 다른 방법
		- pom.xml을 이클립스에서 염.
		- 하단에 [Dependencies] 탭 클릭 ---> "Add" 버튼 클릭하여 조회 
		
## 12. mvn install : 내가 만든 라이브러리 설치하기 
	- 내가 만든 라이브러리 설치 
		- [프로젝트명] 오른쪽 마우스 클릭 -> "Run As" -> "Maven install" 클릭 
		
		
		
		
	
 		