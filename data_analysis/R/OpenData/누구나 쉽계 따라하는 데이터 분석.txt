누구나 쉽게 따라하는 데이터 분석

2. 데이터 분석을 위한 필요지식
## 데이터 분석을 위해 필요한 역량
# 데이터 처리 능력
# 빅데이터 프로그래밍 능력
  - R & Python
# 기초지식 및 이론 이해능력
  - 수학적 기초지식과 이론 이해 능력
# 융합문제해결 및 직업윤리 준수 능력
# 빅데이터 기획능력
  - 비지니스 영역별 빅데이터의 활용 가능성을 탐색하고 비즈니스 모델화할 수 있는 능력
# 빅데이터 시각화 능력
# 빅데이터 분석 능력  

## 데이터 분석에 필요한 요소
# 데이터 분석을 위한 단계
  - 데이터 수집 단계 - 먼저 발굴하고자 하는 지식과 관련된 다양한 데이터 소스로 부터 데이터를 수집
  - 데이터 전처리 단계 - 수집한 데이터에서 필요 없는 데이터를 필터링하거나 적절한 형태로 가공
  - 데이터 저장 및 관리 단계 - 데이터를 체계적으로 저장
  - 데이터 분석 단계 - 다양한 형태의 데이터를 분석 
  - 지식 시각화 단계 - 다양한 데이터가 만들어 내는 패턴들을 시각화

## 데이터 분석 도구
# 데이터 분석을 위한 TOOL
  - 엑셀 
  - R  
  - MATLAB
  - 데이터 분석 도구를 사용
  - Python
  - SQL
  - SAS
# R이란?
  - R은 오픈소스 프로그램으로 통계/데이터 마이닝 및 그래프를 위한 언어
  - 빅데이터 분석을 목적으로 주목을 받고 있으며, 5000개가 넘는 패키지들이 다양한 기능을 지원
  - 구글, 아마존 클라우드 서비스와 연동, 호환성 좋음
# R의 장점
  - 무료
  - 활성화된 사용자 커뮤니티
  - 각종 통계 패키지 제공
  - 다른 프로그래밍 언어보다 쉬움
  - 쉬운 한글 처리
  - 뛰어난 시각화  
## 빅데이터 시대를 위한 준비
# 데이터 분석 관련 자격증
  - 데이터분석준전문가 - ADsP(Advanced Data Analytics Semi-Professional)
  - 빅데이터분석기사
# 데이터 분석 관련 공모전

3. R과 R스튜디오 설치 및 사용자
## R 설치

## R Studio 설치
  - R을 효과적으로 편리하게 사용할 수 있도록 도와주는 통합개발환경(IDE)
## R Studio 실행
# Script 창
  - 코드를 작성하는 창
  - Console과 달리 긴 코드 작성에 용의
  - 필요한 부분만 선택하여 실행 가능
  - 사용한 코드를 별도 파일(.R)로 저장 및 불러오기 기능
  - 함수에 대한 자동 완성 기능 제공
# Console 창
  - 코드 실행 및 결과, 오류 확인 등(R GUI)
# Environment / History /Connections 창
  - Environment : 입력된 데이터 세트, 변수 확인
  - History : 실행한 명령어, 결과 등 확인
  - Connections : DB 서버와 연결 관리  

# Files 창 / Plots 창 / Packages 창 / Help 창 / Viewer 창
  - Files : 파일 탐색기
  - Plots : 그래프 출력
  - Packages : 패키지 관리
  - Help : 도움말
  - Views : 그래프 웹 브라우저 출력
# 시작 폴더(작업공간) 설정
  - R Studio에서 [Tools] -> [Global Options]
  - [General] -> [Default working directory]
  - [C:/Opendata] 설정 - 각자 원하는 작업 폴더 설정  
# UTF-8 설정(한글 지원)  
  - [Tools] -> [Global Options]
  - [Code] -> [ Saving]
  - Default text encoding -> UTF-8

4. 데이터 구조 및 기초함수
## R 기본 개념
# 데이터 구조, 변수, 값
  - 데이터 구조
    - getwd세트 : 행과 열로 이루어진 데이터 구조
	- 행(Row) : 데이터 셑트의 가로 영역(관측치)
	- 열(Column) : 데이터 세트의 세로 영역(변수)
	- 데이터 값(Value) : 관측된 값
  - 변수
    - 변수(Variable) : 다양하게 변할 수 있는 값
    - 할당연산자 : 변수를 할당할때 <-를 사용
	  - R studio 에서 "<-"는 [Alt] + [-]를 누르면 자동 생성됨
	  - ":"(콜론) : 시작 숫자와 마지막 숫자 사이의 1씩 증가하는 연속 값을 변수로 구성함
	    ex) 1:5 - 1,2,3,4,5의 값 출력
	  - c() - 데이터나 객체를 하나로 결합
  - 변수명 생성 규칙
    - 첫 글자는 반드시 영문자 또는 마침표만 사용 가능
	- 두번째 글자 이후로는 영문자, 숫자, 밑줄 사용 가능 
	- 대문자와 소문자 구분
	- 빈칸은 사용 불가
  - Script
    - x <- 10  # 데이터 10을 x 변수에 할당
    - y <- c(1,2,3,4,5) # c() : 여러개의 값을 변수에 할당 할 때 사용자
    - exam <- c(1:10) # 1부터 10까지 1씩 증가하는 연속 값을 변수 exam에 할당
  - 변수의 자료형
    - 숫자형 - 정수와 실수 모두 해당 - num <- c(1,2,-5,11.7)
    - 문자형 - 큰 따옴표 또는 작은 따옴표로 묶어서 표현 - chr <- c("MU", 'Jane')
    - 논리형(TRUE, FALSE) - 참, 거짓을 나타내며, T나 F로 줄여서 사용 가능 - logic <- c(TRUE, FALSE)
    - 특수값 - num_nan <- c(NaN, 3)
      - NA - 결측값(missing value)
      - NULL - 정의되어 있지 않음을 의미
      - NaN - 수학적으로 정의가 불가능한 값(Ex. sqrt(-2))
      - Inf, -Inf - 양의 무한대, 음의 무한대
	- 자료형 확인
      - str(num), str(chr), str(logic), str(num_nam)
	- 변수 값 변경과 산술 연산
      - 변수에 저장된 값은 언제든지 변경 가능 
      - 변수의 자료형은 어떤 값을 저장하는가에 따라 유동적으로 바뀜
	- 산술연산  
	  - a <- 2, b <- 5
	  - a+b
	  - a-b
	  - a*b
	  - a/b
	  - a%/%b  # 나눗셈의 몫
	  - a%%b   # 나눗셈의 나머지
	  - a^b    # a의 b제곱(b승)
# 기초 함수
  - 어떤 데이터 값을 미리 정해 둔 공식에 따라 처리한 결과를 도출하는 기능
  - sum(), mean(), sd(), var(), median(), max(), min()
  - length() - 벡터에 포함된 값들의 개수(길이)
  - range() - 최대값에서 최솟값의 범위

# 논리 연산
  - 논리연산자
    - 논리 연산을 만족하면 TRUE(참)을 출력, 그렇지 않으면 FALSE(거짓) 출력
    - <, <=, >, >=, ==, !=, |, & 	

# 논리 연산
  - 논리 연산자를 활용한 인덱싱 - 논리 연산을 만족하는 TRUE 값을 가지는 위치의 값만 출력됨
  - 인덱싱 - 대괄호 []로 나타냄
    - d[d>=5]  
    - sum(d>=5) # 5보다 크거나 같은 값의 개수를 출력
    - sum(d[d>=5]) # 5보다 크거나 같음 값의 합을 출력	
	- logi_ressult <- d > 5 & d < 8
	  d[logi_result] 

# 매트릭스와 테이터 프레임
  - 매트릭스(matrix) - 데이터 테이블의 모든 셀의 값들이 동일한 자료형
    - matrix() - matrix(입력값, nrow=행의 수, ncol=열의 수)
	- rownames() - 행이름 확인 및 바꾸기
    - colnames() - 열이름 확인 및 바꾸기	
  - 데이터 프레임(data frame) - 자료형이 다른 컬럼들로 구성 
    - data.frame() - data.frame(변수명1, 변수명2, 변수명3, ...)
    	

# 패키지 설치 및 로드
  - 패키지(Package) - 유능한 기능을 가진 함수들을 묶은 함수 꾸러미
  - 패키지 설치 - install.packages("설치할 패키지명")
  - 패키지 로드 : library(로드할 패키지명)
  - 필요한 패키지 찾기
    - CRAN - https://cran.r-project.org/web/packages/available_packages_by_name.html
	- 현재 버전, 만든 사람, 배포 일자 등
  
5. 데이터 분석을 위한 R기초
## 데이터 수집
# 필요한 데이터 어디서 찾을까?
  - 공공데이터
    - 공공데이터 포털 : https://www.data.go.kr
    - 공공기관이 생성 또는 취득하여 관리하고 있는 공공데이터를 한 곳에서 제공하는 통합 창구
  - 지자체 보유 데이터
    - 서울 열린데이터 광장 : https://data.seoul.go.kr  
	- 부산 공공데이터 포털 : https://data.busan.go.kr
	- 대구 데이터 허브 : http://data.daegu.go.kr
  - 공공기관 보유 데이터
    - 각 통계 데이터센터 : https:// data.kostat.go.kr
	- 한국도로공사 공공데이터 포털 : http://data.ex.co.kr
	- 보건의료빅데이터개방시스템 : https://opendata.hira.or.kr
  - 민간데이터  
    - KT 통신빅데이터 플랫폼 : https://bdp.kt.co.kr
    - 금융빅데이터 플랫폼 : https://www.bigdata-finance.kr
      - 비씨카드 및 금융 분야 다수 기업의 빅데이터 플랫폼 구축 사업자로 선정하여 구축한 금융 빅데이터 거래소
  - 공공 + 민간데이터
    - 데이터 스토어 : https://www.datastore.or.kr
    - 데이터 스토어는 누구나 쉽게 데이터를 온라인으로 판매하거나 구매할 수 있는 '데이터오픈마켓'
    - 서비스 개발, 데이터 분석 등 사업에 필요한 데이터를 데이터스토어에서 쉽게 사고 팔 수 있음

## 데이터 불러오기
# 작업 경로 확인 및 R로 데이터 불러오기
  - 주요 함수
    - getwd() - 현재 설정된 작업공간(working directory) 확인
    - setwd() - 새로운 작업공간 설정 
    - read.csv() - csv 형식의 파일 R로 불러오기 
      - read.csv("파일명", header=T)
      - header - 데이터에서 첫번째 행이 변수명인지 아닌지 판단(첫번째 행이 변수명이면 header=TRUE)
  - csv - Comma-Separated Values

# 데이터 저장하기
  - 주요 함수 
    - write.csv - csv 파일로 저장하기 
	  - write.csv(저장할 데이터프레임 이름, file="저장할 파일명.csv")
	- write.table - txt 파일로 저장하기  
	  - write.table(저장할 데이터프레임 이름, file="저장할파일명.txt", sep="," na="NA"
	    - sep : "," 또는 ";" 등 데이터 구분자 입력(tab 구분자는 sep="\t")
		- na - 결측값 있으면 NA로 표시
	  - read.table - txt 파일을 R로 불러오기 
 
# 엑셀 파일 저장하기 및 불러오기
  - 엑셀 파일을 불러오고 엑셀 파일로 저장하기 위해서는 패키지를 설치해야 함수
  - 엑셀 파일로 저장하기(writexl 패키지 설치 및 로드 필요)
    - write.xlsx(저장할 데이터프레임 이름, path="저장할파일명.xlsx")
  - 엑셀 파일을 R로 불러오기(readxl 패키지 설치 및 로드 필요)
    - read_excel(저장할 데이터프레임 이름)

6. 데이터 정제 기법
## 데이터 분석 및 가공
# 데이터 파악 함수
  - View() - 뷰어 창에서 데이터를 확인
  - head(), tail() - 상위 6개, 하위 6개 관측치 미리보기
  - str() - 데이터 구조, 변수 개수, 변수 명, 관찰자 개수, 미리보기
  - dim() - 데이터 차원(행, 열의 개수)
  - names() - 데이터프레임의 변수명(열이름) 확인
  - colnames() - 데이터 프레임의 열이름 확인
  - ls() - 저장되어 있는 객체 모두 출력
  - rm(list=ls()) - 모든 객체 삭제 
  
# 데이터 전처리를 위한 dplyr 패키지
  - 패키지 설치 및 로드 
    - 반드시 dplyr 피키지 설치 및 로드를 해야 아래 함수 사용 가능
	- install.packages("dplyr")
	- library(dplyr)
  - 주요 함수
    - filter()- 지정한 조건식에 맞는 데이터(행) 추출
	          - filter(dataframe, 조건1, 조건2, ...)
              - filter(hf, Month == 1, DayofMonth == 1)
              - filter(hf, Month == 1 | Month == 2)			  
			  
    - select() - 선택한 변수(열)를 추출
	  - 데이터프레임 변수(열) 선별하기
	    - select(dateframe, 변수1, 변수2, ...) : 선별하고자 하는 변수 이름을 기입
	  - select(hf, Year, Month, DayOfWeek) # Year, Month, DayOfWiik 열을 추출

    - mutate() - 새로운 변수(열)을 추가(함수 내에서 계산 가능)
	  - mutate(dataframe, 새로운변수 = 기존변수 조합한 수식 ...)

    - arrange() - 데이터 정렬(내림차순, 오름차순), 기본적으로 오름차순
	  - arrange(dataframe, 정렬기준1(변수명1), 정렬기준2(변수명2), ...)
	  - desc() - 내림차순(descending) 정렬

    - distinct() - 중복없는 유일한 값 추출
	  - distinct(dataframe, 기준변수1, 기준변수2, ...)
	    - distinct(hf, Year) # Year에 대해 유일 값 추출
	    - distinct(hf, Year, Month) # Year와 Month에 대해 유일 값 추출

    - summarise() - 수치형 값에 대한 요약 통계량 계산(mean, median, sd, min, max, sum)
	  - summarise(dataframe, 변수명1=mean(x,na,rm=TRUE), 변수명2 = max(x), ...)
	  - 결측값을 제외하고 계산하려면 na.rm=TRUE 추가
	  - summarise(hf, 지연평균 = mean(ArrDelay), 지연최대 = max(ArrDelay)) # 도착지연평균, 도착지연 최대값에서
	  - summarise(hf, 지연평균 = mean(ArrDelay, na.rm = TRUE), 지연최대 = max(ArrDelay, na.r m = TRUE))
	  
	- summarise() 함수 + group_by 함수
      - group_by() 함수와 함께 사용하여 그룹별 요약 통계량 계산(mean, sum, sd, min, max)
      - summarise(group_by(dataframe, 지정열(level열)), 변수명1 = mean(x, na.rm=TRUE), ...)
        - 결측값을 제외하고 계산하려면 na.rm=TRUE 추가
		
    - group_by() - 데이터 그룹으로 나누기(summarise() 함수와 함께 사용하면 그룹별 연산이 가능)


7. 지하철 승하차 데이터 분석 따라하기_1
## 분석 데이터 다운로드
  - www.data.go.kr 접속
  - "대전광역시도시철도공사 역별 수송실적" 조회 및 다운로드
  
## 데이터 불러오기 
# 작업 경로 확인 및 불러오기  
  - 주요 함수
    - getwd() - 현재 설정된 작업공간(working directory) 확인
	- setwd() - 새로운 작업공간 설정
	- read.csv() - csv 형식의 파일을 R로 불러오기

## 데이터 전처리 	  
# 데이터 확인 및 데이터프레임 이름 변경
  - head(daejeon_subway)
  - tail(daejeon_subway)
  
  - names(daejeon_subway) # 데이터 프레임 변수명 확인
  - names(daejeon_subway) <- c("연도", "역번호","역명","Jan_승차", "Jan_하차", "Feb_승차","Feb_하차",
                             "Mar_승차","Mar_하차", "Apr_승차","Apr_하차", "May_승차","May_하차", "Jun_승차","Jun_하차",
                             "Jul_승차","Jul_하차", "Aug_승차","Aug_하차", "Sep_승차","Sep_하차", "Oct_승차","Oct_하차",
                             "Nov_승차","Nov_하차", "Dec_승차","Dec_하차")
  - names(daejeon_subway) # 데이터 프레임 변수명 확인
  - str(daejeon_subway) # 데이터구조 확인
  - dim(daejeon_subway) # 데이터 차원(행, 열 확인)
  - length(daejeon_subway) # 데이터 객체의 컬럼 개수
  
# 값이 없는 변수(열) 제거하기
  - 10월 이후의 승/하차 정보는 없어(0으로 채워져 있음) 삭제 필요
  - 인덱싱(INDEXING)을 이용하여 필요한 값(행 또는 열) 선택 가능 
  - 인덱싱(Indexing)
    - 대괄호 [i, j]로 표시, [i번째 행, j번째 열]
    - [ , ] - 행 또는 열의 자리에 비어져 있으면 전체 행 또는 전체 열을 의미 
    - 연속된 값은 : 로 표시	
	  - [,1:5] - 1열부터 5열까지 전체 행을 선택 
  - daejeon_subway_new <- daejeon_subway[,1:20]
  - daejeon_subway_new # 새로운 변수값 확인


8. 지하철 승하차 데이터 분석 따라하기_2
## 데이터 분석 
# 1월 승차인원이 가장 많은 정류장은?
  - 주요 함수
    - max() - 최대값 찾기 
	- filter() - 조건에 맞는 데이터만 필터링해서 결과값으로 나타내는 함수 
  - 실습	
    - library(dply)
    - max_jan <- max(daejeon_subway_new$jan_승차) # 1월 승차 인원중 최대값 찾기
    - max_jan
    - filter(daejeon_subway_new, jan_승차 == max_jan) # 최대값을 가지는 행 추출
  - 방법2
    - arrange()을 이용한 방법
      - arrange() - 순서대로 정렬하기(기본 오름차순, desc() 옵션: 내림차순 정렬)
      - 실습
        - Jan_max_row <- arrange(daejeon_subway_new, desc(Jan_승차))
        - Jan_max_row[1, ]
 
        - (arrange(daejeon_subway_new, desc(Jan_승차)))[1, ] 
  - 방법3
    - 주요 함수 - which.min(), which.max() - 특정 값이 최소, 최대인 쉘의 위치 리턴
	- 실습  
	  - which.max(daejeon_subway_new$Jan_승차)
	  - daejeon_subway_new[which.max(daejeon_subway_new$jan_승차),]

# 역별 1월과 3월 승차인원의 차이는?
  - 주요 함수
    - mutate() - 데이터프레임 자료형에 새로운 파생 column을 만드는 함수
	  - mutate(dataframe, 새로운 column명 = 기존 column을 조합한 수식)
	  - daejeon_subway_new$diff <- daejeon_subway_new$Jan_승차 - daejeon_subway_new$Mar_승차
      - head(daejeon_subway_new)
      - daejeon_subway_new1 <- mutate(daejeon_subway_new, diff = Jan_승차 - Mar_승차)
	  - head(daejeon_subway_new1)

# 역별 1월과 3월의 승차인원의 차이를 그래프로?
  - 주요 함수
    - boxplot() - 상자도표 그리기 
	  - main - 그래프 전체 제목, xlab - x축 제목, ylab - y축 제목, names - names - 복수의 box의 이름을
        horizontal - 가로 형태 box 그리기	  
    - boxplot(daejeon_subway_new$Jan_승차, daejeon_subway_new$Mar_승차, main='지하철 승차인원 분포차이',
              xlab='1월 vs 3월', ylab='승차인원(명)', names=c('1월','3월'))	
      - boxplot - 특이값(Outlier), 최대값(maximum), 75th percentile, 평균(mean), 중간값(median), 25th percentile
	              최소값(minimum)
                - 1.5 * IQR, IQR, 1.5 * IQR - IQR - 사분위수범위				  
  - rm(list=ls())
  - [Ctrl] + L - Console 창 Clear
	  
9. 기상정보를 활용한 불쾌지수 분석_1
## 공공데이터 로드
  - 주소창 입력 : www.data.go.kr
  - "제주특별자치도개발공사 기상정보" 입력 및 다운로드

# 사용할 패키지 설치 및 불러오기
  - 주요 함수
    - install.packages() - 사용할 패키지 다운로드 하기
	- library() - 다운받은 패키지 불러오기
  - install.packages("dplyr")
  - install.packages("ggplot2") - 다양한 그래프를 그릴수 있는 패키지
  - library(dplyr)
  - library(ggplot2)  

# 원본데이터 불러오기
  - 주요 함수  
    - file.choose() - 파일을 직접 선택하기
	- read.csv() - csv 형식의 파일 R로 불러오기 
  - data.raw <- read.csv(file.choose())
  
## 데이터 전처리
# 데이터 확인 및 데이터프레임 이름 변경
  - 주요 함수 
    - View() - 뷰어창에서 데이터를 확인
	- head(), tail() - 상위, 하위 6개 관측치 미리보기
	- str() - 데이터 구조, 변수 개수, 변수 명, 관측치 미리보기
	- dim() - 데이터 객체의 차원
	- length() - 데이터 객체의 요소들의 개수
	- names() - 데이터프레임 변수명(열이름) 확인 및 변경 
  - 변수명 변경 
    - names(data.raw) # 데이터프레임 열이름 확인
    - names(data.raw) <- c("일자","평균기온","최소기온","평균지표온도",
                           "최대지표온도","최소지표온도","습도","일사량","풍속")	
    - names(data.raw)

# 일교차 변수 추가하기 1
  - (data.raw$최대기온 - data.raw$최소기온)
  - data.raw$일교차 <- (data.raw$최대기온 - data.raw$최소기온)
  - head(data.raw)	
	
# 일교차 변수 추가하기 2  
  - 주요 함수
    - mutate() - 데이터프레임 자료형에 새로운 파생 column을 만드는 함수 
    - mutate(dataframe, 새로운 column명 = 기존 column을 조합한 수식)	
  - data.raw_tempdist <- mutate(data.raw, 일교차 = 최대기온 - 최소기온)
  - head(data.raw_tempdist)  
	
# 월(month) 변수 추가하기 
  - 주요 함수
    - mutate() - 데이터프레임 자료형에 새로운 파생 column을 만드는 함수 
	- substr() - 문자열 일부 추출. ex) substr("Statistics", 1, 4) -> "Stat"
  - data.month <- mutate(data.raw_tempdist, 월 = substr(data.raw_tempdist$일자,6,7))	
  - head(data.month)
  
10. 기상정보를 활용한 불쾌지수 분석_2
## 데이터 분석
# 일교차의 기초 통계량 구하기 
  - 주요 함수
    - mean() - 평균을 구하는 함수
    - sd() - 표준편차를 구하는 함수 
    - max() - 최대값을 구하는 함수 
    - min() - 최소값을 구하는 함수 
  - mean(data.raw_tempdist$일교차)
  - sd(data.raw_tempdist$일교차)
  - max(data.raw_tempdist$일교차)
  - min(data.raw_tempdist$일교차)

# 데이터 그룹화 시키기 
  - 주요 함수 
    - group_by() - 데이터를 집단별로 그룹화 
    - group_by(데이터명, 기준이 될 변수명)
  - data.group <- group_by(data.month, 월)
  - data.group  

# 그룹화 된 데이터로 월 평균 일교차 확인 및 변수 추가
  - 주요 함수
    - summarise() - 수치형 값에 대한 요약 통계량을 계산하는 함수 
    - mutate() - 
  - data.group.avg <- summarise(data.group, avg=mean(일교차))
  - head(data.group_avg)
  - data.avg.td <- mutate(data.group, 월평균 = mean(일교차))
  - head(data.avg.td)  
  
# 불쾌지수 변수 생성 
  - 불쾌지수 산출 
    - 불쾌지수 = 1.8T - 0.55(1 - RH)(1.8T - 26) + 32
  	          (T:기온(섭씨), RH:상대습도(%))
  - data.thi <- mutate(data.month, 불쾌지수 = 1.8 * 평균기온 - 0.55 *(1-습도/100)*(1.8*평균기온 - 26) * 32)
  - head(data.thi)
  
# 불쾌지수 변수 생성
  - 불쾌지수 70 초과인 날은 몇일?
    - data.thi$불쾌지수 > 70
	- data.thi_70 <- data.thi[data.thi$불쾌지수 > 70]
	- head(data.thi_70)
    - dim(data.thi_70)[1]

    - filter(data.thi, 불쾌지수 > 70)

## 데이터 시각화 
# 월 평균 일교차 그래프 그리기
  - 꺽은 선 + 점 그래프 그리기 
  - 주요 함수 
    - ggplot() - ggplot2 패키지의 그래프를 그리기 위한 함수 
	  - ggplot 함수 내 옵션
	    - geom_line - 선그래프 그리기
		- geom_point - 점 그래프 그리기 
		- aes - 데이터의 변수 및 미적요소들을 설정 
		- ggtitle - 그래프 제목
		- xlab - x축 제목
		- ylab - y축 제목
		- theme - 그래프 배경, 제목, 축선 등 수정
	- as.numeric() - 숫자형으로 변경 
  - ggplot(data = data.group_avg, aes(x=as.numeric(월), y=avg)) + geom_line() + geom_point()	
  - ggplot(data = data.group_avg, aes(x=as.numeric(월), y=avg)) + geom_line() + 
           geom_point(size=2, color = 'red') + ggtitle("월 평균 일교차") +
           ylab("기온") + xlab("월") + theme(plot.title = element_text(hjust = 0.5))		   

# 불쾌지수 그래프 그리기
  - 꺽은 선 그래프 그리기 
  - 주요 함수
    - as.Date() - 문자형(chr)으로 되어있는 변수를 날짜형(Date)으로 변경
      cf) str()함수를 통해서 변수 값의 형식을 반드시 확인해야 함	
    - head(data.thi$일자)
    - str(data.thi$일자)
    - head(as.Date(data.thi$일자))
    - str(as.Date(data.thi$일자))
  - ggplot(data = data.thi, aes(x=as.Date(일자), y=불쾌지수)) + geom_line() +
           ggtitle("일별 불쾌지수") + xlab("날짜")
  - ggplot(data = data.thi, aes(x=as.Date(일자), y=불쾌지수)) + geom_line() +
           ggtitle("일별 불쾌지수") + xlab("날짜")		   

  - 불쾌지수가 70인 경계선 추가 
    - 주요 함수 
      - geom_hline() - 수평선 추가 ex) geom_hline(yintercept=70) - y=70인 수평선 긋기 
      - geom_vline() - 수직선 추가 ex) geom_vline(xintercept=70) - x=70인 수평선 긋기 	  
    - ggplot(data = data.thi, aes(x=as.Date(일자), y=불쾌지수)) + geom_line() +
             ggtitle("일별 불쾌지수") + xlab("날짜") +
             geom_hline(yintercept=70, linetype="dashed", size=1, color="red")			 
			 
11. 유동인구 데이터 분석 따라하기_1 
## 데이터 불러오기
# 사용할 패키지 설치 및 불러오기
  - 패키지 설치 
    - install.packages() - 사용할 패키지 다운로드 하기 
	- library() - 다운받은 패키지 불러오기
	
    - install.packages("dplyr")
    - library(dplyr)
	
  - 파일 불러오기 
    - file.choose() 
    - read.csv()
   
    - data.raw <- read.csv(file.choose(), header=T)
    - data.raw <- read.csv(file.choose(), header=T, fileEncoding="UCS-2LE")	# 맨 마지막 페이지 무시하고 불러오기 

# 데이터 확인 및 데이터프레임 이름 변경
  - 주요 함수 
    - View(), head(), tail(), str(), dim(), names()
    - rename() - 데이터프레임 변수명(열이름) 변경 (reshape 패키지 설치해야 함)
  - names(data.raw)
  - names(data.raw)[5:16]
  - names(data.raw)[5:16] <- c("m10under","m10","m20","m25","m30","m35","m40","m45","m50","m55","m60","m65over",
                               "f10under","f10","f20","f25","f30","f35","f40","f45","f50","f55","f60","f65over")

  - names(data.raw)							   

## 데이터 전처리
# 남녀별 유동인구 합계 변수 추가하기 
  - 주요 함수 
    - mutate()
  - data.use <- mutate(data.raw,
                       m_total = m10under+m10+m20+m25+m30+m35+m40+m45+m50+m55+m60+m65over,
					   f_total = f10under+f10+f20+f25+f30+f35+f40+f45+f50+f55+f60+f65over,
					   mf_total = m_total + f_total)

## 데이터 분석
# 유동인구 상위 10개 지역은?
  - 주요 함수 
    - arrnage()
  - data.arrange <- arrange(data.use, desc(mf_total))
  - data.arrange10 <- head(data.arrange,10)
  					   
# 구역별 남성의 유동인구가 가장 많은 연령층은?
  - 주요 함수
    - max.col() - 각 행에서 최대 값의 열 위치 출력하기
    - names()
  - m_max_which <- max.col(data.use[5:16])+4
  - names(data.use)[m_max_which]  

# 구역별 여성의 유동인구가 가장 많은 연령층은?
  - m_max_which <- max.col(data.use[17:28])+4
  - names(data.use)[m_max_which]  

# mutate 함수를 이용해 변수 추가 
  - data.major.age = mutate(data.use, 
                            major_m = names(data.use)[max.col(data.use[5:16])+4],
                            major_f = names(data.use)[max.col(data.use[17:28])+4])							

# 남녀별 유동인구가 가장 많은 연령대는?
  - 주요 함수
    - table() - 데이터의 빈도를 교차표로 보여주는 함수(지역별 남녀 유동인구가 최대인 연령별 빈도수)
  - m_age_table <- table(data.major.age$major_m)
  - f_age_table <- table(data.major.age$major_f)

# 지역별 최대 유동인구 연령별 빈도수 그리기1 
  - 주요 함수 
    - barplot() - 막대그래프 그리기
  - barplot(m_age_table, xlab="연령대", ylab="빈도 수", ylim=c(0,800), main="남성 유동인구 막대그래프")	
  - barplot(f_age_table, xlab="연령대", ylab="빈도 수", ylim=c(0,800), main="여성 유동인구 막대그래프")

# 지역별 최대 유동인구 연령별 빈도수 그리기2
  - 주요 함수 
    - rbind() - 행 기준으로 합칠 때 사용
    - text() - 그래프에 문자 추가 
      - text(x좌표, y좌표, labels=추가할 문자, pos=입력할 위치, ...)
	    - text함수 내 pos 값에 따른 위치 - 1:아래, 2:왼쪽, 3:위쪽, 4:오른쪽
  - age_table <- rbind(m_age_table, f_age_table) # 데이터 쌍이 달라서 에러 발생
  
  - colnames(age_table) <- c("20대","30대","40대","50대")
  -  bar.text <- barplot(age_table, beside=T, legend=c("man","woman"),
                         xlab = "연령대", ylab="빈도 수", ylim=c(0,800), main = "남성 유동인구 막대그래프)
  - text(bar.text, age_table, labels=age_table, pos=3)						 
  
# 유동인구 최대 지역의 연령별 파이 차트 그리기
  - 주요 함수
    - t() - 행과 열 바꾸기(transpose)
	- pie() - 파이차트 그리기 
	- round() - 반올림
	- paste() - 나열된 원소를 이어 붙이기 
  - data.arrange10_t <- t(data.arrange10)
  - head(data.arrange10_t, 10)
  - data_m_1 <- data.arrange10_t[5:16, 1] # 가장 많은 유동인구 지역의 세대별 유동인구(남성)
  - pie(data_m_1, main="세대별 유동인구)
  - pct <- round(data_m_1/sum(data_m_1)*100)
  - lbls <- paste(pct, "%", sep="")
  - lbls  
  - pie(data_m_1, labels=lbls, main="세대별 유동인구")
	
  